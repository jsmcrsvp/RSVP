// frontend/src/components/SubmitRSVP.js
import React, { useEffect, useState } from "react";
import { getOpenEvents, searchMember, submitRSVP, verifyRSVP, updateRSVP, } from "../api";
import "../styles/SubmitRSVP.css";
import logo from "../assets/JSMCLogo.jpg";

export default function SubmitRSVP() {
  const [activeTab, setActiveTab] = useState("home"); // "home" | "submit" | "verify"

  // Shared
  const [events, setEvents] = useState([]);
  const [error, setError] = useState("");

  // Submit states
  const [isLifeMember, setIsLifeMember] = useState(null);
  const [searchMode, setSearchMode] = useState("");
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [member, setMember] = useState(null);

  const [selectedEvents, setSelectedEvents] = useState({}); // { idx: count }
  const [email, setEmail] = useState("");
  const [rsvpCount, setRsvpCount] = useState("");   // RSVP count (0 or more)
  const [confirmation, setConfirmation] = useState(null);

  const [loadingEvents, setLoadingEvents] = useState(true);
  const [searching, setSearching] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // Submit messaging / success
  const [submitMessage, setSubmitMessage] = useState(null);
  const [submitSuccess, setSubmitSuccess] = useState(false);

  // Verify states
  const [verifyConfNumber, setVerifyConfNumber] = useState("");
  const [verifyResult, setVerifyResult] = useState({ rsvps: [] }); // always an object with rsvps array
  const [verifying, setVerifying] = useState(false);

  // Modify RSVP
  const [editIndex, setEditIndex] = useState(null);
  const [modifiedCount, setModifiedCount] = useState("");
  const [updateMessage, setUpdateMessage] = useState(null);
  const [updateError, setUpdateError] = useState(null);


  // Load open events once
  useEffect(() => {
    (async () => {
      setLoadingEvents(true);
      try {
        console.log("Loading open events...");
        const data = await getOpenEvents();
        setEvents(Array.isArray(data) ? data : []);
        console.log("Open events loaded:", Array.isArray(data) ? data.length : 0);
      } catch (err) {
        console.error("Failed to load open events:", err);
        setError("Failed to load open events.");
      } finally {
        setLoadingEvents(false);
      }
    })();
  }, []);

  // -------- Submit handlers --------
  const handleSearch = async (e) => {
    e.preventDefault();
    setError("");
    setMember(null);
    if (searchMode !== "memberId" && searchMode !== "nameHouse") {
      setError("Choose a search mode first.");
      return;
    }
    if (searchMode === "memberId" && !memberId.trim()) {
      setError("Member ID is required.");
      return;
    }
    if (searchMode === "nameHouse" && (!name.trim() || !houseNumber.trim())) {
      setError("Name and House # are required.");
      return;
    }

    setSearching(true);
    try {
      const payload =
        searchMode === "memberId"
          ? { memberId: memberId.trim() }
          : { name: name.trim(), houseNumber: houseNumber.trim() };

      console.log("Searching member with payload:", payload);
      const result = await searchMember(payload);
      console.log("Search result:", result);
      if (result && result.name) {
        setMember(result);
      } else {
        setError("Member not found.");
      }
    } catch (err) {
      console.error("Error searching member:", err);
      setError(err.message || "Error searching member.");
    } finally {
      setSearching(false);
    }
  };

  const toggleEventSelection = (eventId, checked) => {
    setSelectedEvents((prev) => {
      const copy = { ...prev };
      if (checked) copy[eventId] = copy[eventId] ?? 1;
      else delete copy[eventId];
      return copy;
    });
  };

  const updateEventCount = (eventId, value) => {
    setSelectedEvents((prev) => ({
      ...prev,
      [eventId]: value ? parseInt(value, 10) : 0,
    }));
  };

  const hasValidSelection = () => {
    // at least one event selected & count > 0
    return Object.keys(selectedEvents).some((k) => {
      const v = Number(selectedEvents[k]);
      return !isNaN(v) && v > 0;
    });
  };

  const handleSubmitRSVP = async (e) => {
    e.preventDefault();
    setError("");
    setConfirmation(null);
    setSubmitMessage(null);

    if (!member) {
      setError("Please search and select a member first.");
      return;
    }
    if (!hasValidSelection()) {
      setError("Please select at least one event and give it an RSVP count (>0).");
      return;
    }
    if (!email.trim()) {
      setError("Please enter an email address.");
      return;
    }

    const confNumber = Math.floor(100000 + Math.random() * 900000).toString();

    const payload = {
      memname: member.name,
      memaddress: member.address,
      memphonenumber: member.phone,
      mememail: email.trim(),
      rsvpconfnumber: confNumber,
      events: events
        .map((ev, idx) =>
          selectedEvents[idx] && Number(selectedEvents[idx]) > 0
            ? {
              programname: ev.programname,
              eventname: ev.eventname,
              eventday: ev.eventday,
              eventdate: ev.eventdate,
              rsvpcount: rsvpCount,
            }
            : null
        )
        .filter(Boolean),
    };

    console.log("Submitting RSVP Payload:", payload);

    setSubmitting(true);
    try {
      const res = await submitRSVP(payload);
      console.log("Submit response:", res);
      setConfirmation({ confNumber, ...res });
      setSubmitMessage("RSVP submitted successfully!");
      setSubmitSuccess(true);

      setTimeout(() => {
        // Reset all submit tab states
        setSubmitMessage(null);
        setSubmitSuccess(false);
        setConfirmation(null);
        setMember(null);
        setSelectedEvents({});
        setEmail("");
        setIsLifeMember(null);
        setSearchMode("");
        setMemberId("");
        setName("");
        setHouseNumber("");

        // Switch to Home
        setActiveTab("home");
      }, 15000);

    } catch (err) {
      console.error("Error submitting RSVP:", err);
      setSubmitMessage("Error submitting RSVP: " + (err.message || "Unknown"));
      setSubmitSuccess(false);
    } finally {
      setSubmitting(false);
    }
  };

  // -------- Verify handlers --------
  const handleVerifyRSVP = async (e) => {
    if (e && e.preventDefault) e.preventDefault();
    setError("");
    setVerifyResult({ rsvps: [] });
    setUpdateMessage(null);
    setUpdateError(null);
    if (!verifyConfNumber.trim()) {
      setError("Confirmation number is required.");
      return;
    }

    setVerifying(true);
    try {
      console.log("Calling verifyRSVP for:", verifyConfNumber.trim());
      const data = await verifyRSVP(verifyConfNumber.trim());
      console.log("Verify response:", data);
      // normalize shape: ensure object with rsvps array
      const normalized = data && Array.isArray(data.rsvps) ? data : { rsvps: [] };
      setVerifyResult(normalized);
    } catch (err) {
      console.error("Error verifying RSVP:", err);
      setError(err.response?.data?.message || err.message || "Error verifying RSVP.");
    } finally {
      setVerifying(false);
      setEditIndex(null);
      setModifiedCount("");
    }
  };

  const handleUpdateRSVP = async (rsvpId, newCount) => {
    try {
      console.log("🔧 Sending update for RSVP:", rsvpId, "→", newCount);
      const result = await updateRSVP(rsvpId, parseInt(newCount, 10));
      console.log("✅ RSVP updated:", result);

      const successMsg = "RSVP updated successfully!";

      // Refresh verify results
      await handleVerifyRSVP({ preventDefault: () => { } });
      setEditIndex(null);

      // Show success AFTER refresh
      setUpdateMessage(successMsg);
      setUpdateError(null);

      // After 15s clear everything and return to Home
      setTimeout(() => {
        setVerifyConfNumber("");
        setVerifyResult(null);
        setEditIndex(null);
        setModifiedCount("");
        setUpdateMessage(null);
        setActiveTab("home");
      }, 15000);
    } catch (err) {
      console.error("❌ Error updating RSVP:", err);
      setUpdateError(err.message || "Error updating RSVP.");
      setUpdateMessage(null);

      setTimeout(() => setUpdateError(null), 5000);
    }
  };

  // Helper to extract member info from verifyResult.rsvps (first doc)
  const verifyMemberFromResult = () => {
    const arr = verifyResult?.rsvps ?? [];
    if (!Array.isArray(arr) || arr.length === 0) return null;
    const first = arr[0];
    return {
      name: first.memname || "",
      address: first.memaddress || "",
      phone: first.memphonenumber || "",
      email: first.mememail || "",
    };
  };

  // Utility to format YYYY-MM-DD → MM/DD/YYYY
  const displayDate = (dateStr) => {
    if (!dateStr) return "";
    const [year, month, day] = dateStr.split("-");
    return `${month}/${day}/${year}`;
  };

  // -------- UI --------
  return (
    <div className="page-wrapper">
      <div className="rsvp-container">
        {/* ✅ Logo at the top */}
        <div className="logo-wrapper">
          <img src={logo} alt="JSMC Logo" className="rsvp-logo" />
        </div>
        {error && <div className="error-message">{error}</div>}
        {/* HOME */}
        {activeTab === "home" && (
          <div className="home">
            <h4>Welcome to JSMC RSVP Portal</h4>

            {/* Open Events Table */}
            <div className="result-table-wrapper" style={{ marginTop: "10px" }}>
              <h4>Current Open Events to Submit or Modify RSVP</h4>

              {Array.isArray(events) && events.length > 0 ? (
                <table className="result-table" style={{ marginBottom: "15px" }}>
                  <thead>
                    <tr>
                      <th>Program</th>
                      <th>Event Name</th>
                      <th>Event Date</th>
                      <th>RSVP By</th>
                    </tr>
                  </thead>
                  <tbody>
                    {events.map((ev, idx) => {
                      // Check if this is the first event for this program
                      const isFirst = idx === 0 || ev.programname !== events[idx - 1].programname;
                      // Count how many events belong to this program
                      const programCount = events.filter(
                        (e) => e.programname === ev.programname
                      ).length;

                      return (
                        <tr key={ev._id || idx}>
                          {isFirst && (
                            <td rowSpan={programCount}>{ev.programname}</td>
                          )}
                          <td>{ev.eventname}</td>
                          <td>{ev.eventday}, {displayDate(ev.eventdate)}</td>
                          <td>{displayDate(ev.closersvp)}</td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              ) : (
                <p style={{ fontStyle: "italic", color: "#666" }}>
                  No open events available at this time.
                </p>
              )}
            </div>

            <h4>Please select Submit RSVP or Verify / Modify RSVP Tab</h4>
          </div>
        )}
        {/* Tabs */}
        <div className="tab-header">
          <button className={activeTab === "home" ? "tab active" : "tab"} onClick={() => setActiveTab("home")}>
            Home
          </button>
          <button className={activeTab === "submit" ? "tab active" : "tab"} onClick={() => setActiveTab("submit")}>
            Submit RSVP
          </button>
          <button className={activeTab === "verify" ? "tab active" : "tab"} onClick={() => setActiveTab("verify")}>
            Verify / Modify RSVP
          </button>
        </div>

        {/* SUBMIT */}
        {activeTab === "submit" && (
          <>
            {isLifeMember === null && (
              <div className="form-section">
                <h3>Are you JSMC Life Member?</h3>
                <label>
                  <input type="radio" name="lifeMember" value="yes" onChange={() => setIsLifeMember("yes")} /> Yes
                </label>
                <label style={{ marginLeft: "1rem" }}>
                  <input type="radio" name="lifeMember" value="no" onChange={() => setIsLifeMember("no")} /> No
                </label>
              </div>
            )}

            {isLifeMember === "no" && <div className="message">Thank you. RSVP is only for Life Members.</div>}

            {isLifeMember === "yes" && !member && (
              <form className="search-form" onSubmit={handleSearch}>
                <h4>Retrieve membership using</h4>

                <div className="form-row">
                  <label>
                    <input
                      type="radio"
                      value="memberId"
                      checked={searchMode === "memberId"}
                      onChange={() => setSearchMode("memberId")}
                    />
                    Member ID
                  </label>
                  <label style={{ marginLeft: "1rem" }}> OR </label>
                  <label style={{ marginLeft: "1rem" }}>
                    <input
                      type="radio"
                      value="nameHouse"
                      checked={searchMode === "nameHouse"}
                      onChange={() => setSearchMode("nameHouse")}
                    />
                    First Name &amp; House #
                  </label>
                </div>

                {/* ---- Member ID Search ---- */}
                {searchMode === "memberId" && (
                  <div className="inline-fields">
                    <input
                      className="small-input"
                      type="number"
                      value={memberId}
                      onChange={(e) => setMemberId(e.target.value)}
                      placeholder="Enter Member ID"
                    />
                    <button
                      className="button"
                      type="submit"
                      disabled={searching || memberId.trim() === ""}
                      style={{
                        backgroundColor:
                          searching || memberId.trim() === "" ? "lightgray" : "#007bff",
                        color: searching || memberId.trim() === "" ? "#666" : "white",
                        cursor:
                          searching || memberId.trim() === "" ? "not-allowed" : "pointer",
                      }}
                    >
                      {searching ? "Searching..." : "Search"}
                    </button>
                  </div>
                )}

                {/* ---- Name + House Search ---- */}
                {searchMode === "nameHouse" && (
                  <div className="inline-fields">
                    <input
                      className="small-input"
                      type="text"
                      value={name}
                      onChange={(e) => setName(e.target.value)}
                      placeholder="First Name"
                    />
                    <span className="inline-label">House #</span>
                    <input
                      className="small-input"
                      type="text"
                      value={houseNumber}
                      onChange={(e) => setHouseNumber(e.target.value)}
                      placeholder="e.g. 123"
                    />
                    <button
                      className="button"
                      type="submit"
                      disabled={
                        searching || name.trim() === "" || houseNumber.trim() === ""
                      }
                      style={{
                        backgroundColor:
                          searching || name.trim() === "" || houseNumber.trim() === ""
                            ? "lightgray"
                            : "#007bff",
                        color:
                          searching || name.trim() === "" || houseNumber.trim() === ""
                            ? "#666"
                            : "white",
                        cursor:
                          searching || name.trim() === "" || houseNumber.trim() === ""
                            ? "not-allowed"
                            : "pointer",
                      }}
                    >
                      {searching ? "Searching..." : "Search"}
                    </button>
                  </div>
                )}
              </form>
            )}

            {member && (
              <form className="rsvp-form" onSubmit={handleSubmitRSVP}>
                <div className="result-table-wrapper">
                  <h4>Membership Details</h4>
                  <table className="result-table" style={{ marginBottom: 10 }}>
                    <tbody>
                      <tr>
                        <th>Name</th>
                        <td>{member.name}</td>
                      </tr>
                      <tr>
                        <th>Address</th>
                        <td>{member.address}</td>
                      </tr>
                      <tr>
                        <th>Phone</th>
                        <td>{member.phone}</td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                <div className="result-table-wrapper">
                  <h4>Select Events to RSVP</h4>
                  <table className="result-table">
                    <thead>
                      <tr>
                        <th>Program</th>
                        <th>Event Name</th>
                        <th>Event Date</th>
                        <th>Select</th>
                        <th>RSVP</th>
                      </tr>
                    </thead>
                    <tbody>
                      {events.map((ev, idx) => {
                        const isFirst = idx === 0 || ev.programname !== events[idx - 1].programname;
                        const programCount = events.filter(
                          (e) => e.programname === ev.programname
                        ).length;

                        return (
                          <tr key={idx}>
                            {isFirst && (
                              <td rowSpan={programCount}>{ev.programname}</td>
                            )}
                            <td>{ev.eventname}</td>
                            <td>
                              {ev.eventday}, {displayDate(ev.eventdate)}
                            </td>
                            <td>
                              <input
                                type="checkbox"
                                checked={selectedEvents[idx] !== undefined}
                                onChange={(e) => toggleEventSelection(idx, e.target.checked)}
                              />
                            </td>
                            <td>
                              {selectedEvents[idx] !== undefined ? (
                                <input
                                  type="number"
                                  min="0"
                                  value={rsvpCount}
                                  onChange={(e) => setRsvpCount(e.target.value)}
                                  placeholder="Count"
                                  style={{ width: "60px" }}
                                />
                              ) : (
                                "-"
                              )}
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>

                <div className="inline-fields">
                  <label>Email Address</label>
                  <input className="small-input" type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Enter Email Address" />
                  <button
                    className="button"
                    type="submit"
                    disabled={rsvpCount === "" || email === ""}
                    style={{
                      backgroundColor: rsvpCount === "" || email === "" ? "grey" : "#007bff",
                      cursor: rsvpCount === "" || email === "" ? "not-allowed" : "pointer",
                    }}
                  >
                    Submit RSVP
                  </button>
                </div>
              </form>
            )}

            {/* Success / error messages at bottom */}
            {submitSuccess && submitMessage && (
              <div style={{ color: "green", marginTop: "10px" }}>
                ✅ {submitMessage}
                {confirmation && (
                  <div>Confirmation #: {confirmation.confNumber || confirmation?.confNumber}</div>
                )}
              </div>
            )}

            {!submitSuccess && submitMessage && (
              <div style={{ color: "red", marginTop: "10px" }}>
                ❌ {submitMessage}
              </div>
            )}
          </>
        )}

        {/* VERIFY */}
        {activeTab === "verify" && (
          <form className="verify-form" onSubmit={handleVerifyRSVP}>
            <h3>Verify / Modify RSVP</h3>
            <div className="inline-fields">
              <input
                className="small-input"
                type="text"
                value={verifyConfNumber}
                onChange={(e) => setVerifyConfNumber(e.target.value)}
                placeholder="Enter Confirmation #"
              />
              <button className="button" type="submit" disabled={verifying}>
                {verifying ? "Verifying..." : "Verify"}
              </button>
            </div>

            {/* Show only when rsvps are returned */}
            {verifyResult && Array.isArray(verifyResult.rsvps) && verifyResult.rsvps.length > 0 && (
              <div className="result-table-wrapper">
                <h4>Current RSVP Details</h4>

                {/* Member details from first RSVP doc */}
                <table className="result-table" style={{ marginBottom: 10 }}>
                  <tbody>
                    <tr>
                      <th>Name</th>
                      <td>{verifyMemberFromResult()?.name}</td>
                    </tr>
                    <tr>
                      <th>Address</th>
                      <td>{verifyMemberFromResult()?.address}</td>
                    </tr>
                    <tr>
                      <th>Phone</th>
                      <td>{verifyMemberFromResult()?.phone}</td>
                    </tr>
                    <tr>
                      <th>Email</th>
                      <td>{verifyMemberFromResult()?.email}</td>
                    </tr>
                  </tbody>
                </table>

                {/* RSVP Events */}
                <table className="result-table">
                  <thead>
                    <tr>
                      <th>Program</th>
                      <th>Event Name</th>
                      <th>Event Date</th>
                      <th>Status</th>
                      <th>RSVP</th>
                      <th>Modify</th>
                    </tr>
                  </thead>
                  <tbody>
                    {verifyResult.rsvps.map((ev, idx) => (
                      <tr key={ev._id || idx}>
                        <td>{ev.programname}</td>
                        <td>{ev.eventname}</td>
                        <td>{ev.eventday}, {displayDate(ev.eventdate)}</td>
                        <td>{ev.eventstatus}</td>
                        <td>
                          {editIndex === idx ? (
                            <input
                              type="number"
                              min="0"
                              value={modifiedCount}
                              onChange={(e) => setModifiedCount(e.target.value)}
                              style={{ width: "60px" }}
                            />
                          ) : (
                            ev.rsvpcount
                          )}
                        </td>
                        <td>
                          {ev.eventstatus === "Open" ? (
                            editIndex === idx ? (
                              <button
                                type="button"
                                onClick={() => handleUpdateRSVP(ev._id, modifiedCount)}
                              >
                                Save
                              </button>
                            ) : (
                              <label>
                                <input
                                  type="checkbox"
                                  onChange={() => {
                                    setEditIndex(idx);
                                    setModifiedCount(ev.rsvpcount);
                                  }}
                                />
                                Modify
                              </label>
                            )
                          ) : (
                            <span style={{ color: "gray" }}>Not Editable</span>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}

            {/* No results case */}
            {verifyResult && verifyResult.checked && Array.isArray(verifyResult.rsvps) && verifyResult.rsvps.length === 0 && (
              <div style={{ textAlign: "center", color: "#888", fontStyle: "italic", marginTop: "10px" }}>
                No RSVP records found for this confirmation number or Event RSVP may be closed.
              </div>
            )}

            {/* Success / error messages at bottom */}
            {updateMessage && (
              <div style={{ color: "green", marginTop: "10px" }}>
                ✅ {updateMessage}
              </div>
            )}
            {updateError && (
              <div style={{ color: "red", marginTop: "10px" }}>
                ❌ {updateError}
              </div>
            )}

          </form>
        )}
      </div>
    </div>
  );
}



// frontend/src/components/SubmitRSVP.js ======= Submit Working 090525 ====4:00pm =====
import React, { useEffect, useState } from "react";
import { getOpenEvents, searchMember, submitRSVP, verifyRSVP, updateRSVP } from "../api";
import "../styles/SubmitRSVP.css";

export default function SubmitRSVP() {
  const [activeTab, setActiveTab] = useState("home"); // "home" | "submit" | "verify"

  // -------- Shared State --------
  const [events, setEvents] = useState([]);
  const [error, setError] = useState("");

  // -------- Submit RSVP State --------
  const [isLifeMember, setIsLifeMember] = useState(null);
  const [searchMode, setSearchMode] = useState("");
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [member, setMember] = useState(null);

  const [selectedEvents, setSelectedEvents] = useState({});
  const [email, setEmail] = useState("");
  const [confirmation, setConfirmation] = useState(null);

  const [loadingEvents, setLoadingEvents] = useState(true);
  const [searching, setSearching] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // -------- Verify RSVP State --------
  const [verifyConfNumber, setVerifyConfNumber] = useState("");
  const [verifyResult, setVerifyResult] = useState(null);
  const [verifying, setVerifying] = useState(false);

  // -------- Modify RSVP Count --------
  const [editIndex, setEditIndex] = useState(null);
  const [modifiedCount, setModifiedCount] = useState("");

  const [submitMessage, setSubmitMessage] = useState(null);
  const [submitError, setSubmitError] = useState(null);

  const [updateMessage, setUpdateMessage] = useState(null);
  const [updateError, setUpdateError] = useState(null);

  // Load open events once
  useEffect(() => {
    (async () => {
      setLoadingEvents(true);
      try {
        const data = await getOpenEvents();
        setEvents(Array.isArray(data) ? data : []);
      } catch {
        setError("Failed to load open events.");
      } finally {
        setLoadingEvents(false);
      }
    })();
  }, []);

  // ---- Submit RSVP Handlers ----
  const handleSearch = async (e) => {
    e.preventDefault();
    setError("");
    setMember(null);

    if (searchMode === "memberId" && !memberId.trim()) {
      setError("Member ID is required.");
      return;
    }
    if (
      searchMode === "nameHouse" &&
      (!name.trim() || !houseNumber.trim())
    ) {
      setError("Name and House # are required.");
      return;
    }

    setSearching(true);
    try {
      const payload =
        searchMode === "memberId"
          ? { memberId: memberId.trim() }
          : { name: name.trim(), houseNumber: houseNumber.trim() };

      const result = await searchMember(payload);
      if (result && result.name) {
        setMember(result);
      } else {
        setError("Member not found.");
      }
    } catch (err) {
      setError(err.message || "Error searching member.");
    } finally {
      setSearching(false);
    }
  };

  const toggleEventSelection = (eventId, checked) => {
    setSelectedEvents((prev) => {
      const copy = { ...prev };
      if (checked) {
        copy[eventId] = 1;
      } else {
        delete copy[eventId];
      }
      return copy;
    });
  };

  const updateEventCount = (eventId, value) => {
    setSelectedEvents((prev) => ({
      ...prev,
      [eventId]: value ? parseInt(value, 10) : 0,
    }));
  };

  const handleSubmitRSVP = async (e) => {
    e.preventDefault();
    setError("");
    setConfirmation(null);

    if (!member) {
      setError("Please search and select a member first.");
      return;
    }
    if (Object.keys(selectedEvents).length === 0) {
      setError("Please select at least one event and provide RSVP count.");
      return;
    }

    const confNumber = Math.floor(100000 + Math.random() * 900000).toString();

    const payload = {
      memname: member.name,
      memaddress: member.address,
      memphonenumber: member.phone,
      rsvpconfnumber: confNumber,
      events: events
        .filter((_, idx) => selectedEvents[idx] !== undefined)
        .map((ev, idx) => ({
          programname: ev.programname,
          eventname: ev.eventname,
          eventday: ev.eventday,
          eventdate: ev.eventdate,
          rsvpcount: selectedEvents[idx],
        })),
    };

    setSubmitting(true);
    try {
      const res = await submitRSVP(payload);
      setConfirmation({ confNumber, ...res });
      setSelectedEvents({});
      setSubmitMessage("RSVP submitted successfully!");
      setSubmitError(null);
    } catch (err) {
      setError(err.message || "Error submitting RSVP.");
      setSubmitError(err.message || "Error submitting RSVP.");
      setSubmitMessage(null);
    } finally {
      setSubmitting(false);
    }
  };

  // ---- Verify RSVP Handlers ----
  const handleVerifyRSVP = async (e) => {
    e.preventDefault();
    setError("");
    setVerifyResult(null);

    if (!verifyConfNumber.trim()) {
      setError("Confirmation number is required.");
      return;
    }

    setVerifying(true);
    try {
      const data = await verifyRSVP(verifyConfNumber.trim());

      //console.log("✅ RSVP verification response:", data);

      if (Array.isArray(data.rsvps) && data.rsvps.length > 0) {
        //console.log(`✅ Loaded ${data.rsvps.length} RSVP record(s).`);
      } else {
        console.warn("⚠️ No RSVP records found or rsvps is not an array.");
      }
      setVerifyResult(data);
      //setVerifyResult(data.rsvps || []);
    } catch (err) {
      console.error("❌ Error verifying RSVP:", err);
      setError(err.response?.data?.message || err.message || "Error verifying RSVP.");
    } finally {
      setVerifying(false);
    }
  };

  const handleUpdateRSVP = async (rsvpId, newCount) => {
    try {
      console.log("🔧 Sending update for RSVP:", rsvpId, "→", newCount);

      const result = await updateRSVP(rsvpId, parseInt(newCount, 10));

      console.log("✅ RSVP updated:", result);

      setUpdateMessage("RSVP updated successfully!");
      setUpdateError(null);

      // Refresh the verify results
      await handleVerifyRSVP({ preventDefault: () => { } });

      setEditIndex(null);

      // Clear success message after 3s
      setTimeout(() => setUpdateMessage(null), 3000);
    } catch (err) {
      console.error("❌ Error updating RSVP:", err);

      setUpdateError(err.message || "Error updating RSVP.");
      setUpdateMessage(null);

      // Clear error message after 5s
      setTimeout(() => setUpdateError(null), 5000);
    }
  };

  // -------- UI --------
  return (
    <div className="page-wrapper">
      <div className="rsvp-container">
        <h2>JSMC RSVP</h2>

        {/* Tabs */}
        <div className="tab-header">
          <button
            className={activeTab === "home" ? "tab active" : "tab"}
            onClick={() => setActiveTab("home")}
          >
            Home
          </button>
          <button
            className={activeTab === "submit" ? "tab active" : "tab"}
            onClick={() => setActiveTab("submit")}
          >
            Submit RSVP
          </button>
          <button
            className={activeTab === "verify" ? "tab active" : "tab"}
            onClick={() => setActiveTab("verify")}
          >
            Verify / Modify RSVP
          </button>
        </div>

        {error && <div className="error-message">{error}</div>}

        {/* ----- TAB: Home ----- */}
        {activeTab === "home" && (
          <>
            <form className="home">
              <h3>Welcome to JSMC RSVP Portal</h3>
              <h4>Please select Submit RSVP or Verify / Modify RSVP</h4>
            </form>
          </>
        )}

        {/* ----- TAB: Submit RSVP ----- */}
        {activeTab === "submit" && (
          <>
            {isLifeMember === null && (
              <div className="form-section">
                <h3>Are you JSMC Life Member?</h3>
                <label>
                  <input
                    type="radio"
                    name="lifeMember"
                    value="yes"
                    onChange={() => setIsLifeMember("yes")}
                  />
                  Yes
                </label>
                <label style={{ marginLeft: "1rem" }}>
                  <input
                    type="radio"
                    name="lifeMember"
                    value="no"
                    onChange={() => setIsLifeMember("no")}
                  />
                  No
                </label>
              </div>
            )}

            {isLifeMember === "no" && (
              <div className="message">
                Thank you. RSVP is only for Life Members.
              </div>
            )}

            {isLifeMember === "yes" && !member && (
              <form className="search-form" onSubmit={handleSearch}>
                <h4>Retrieve membership using</h4>
                <div className="form-row">
                  <label>
                    <input
                      type="radio"
                      value="memberId"
                      checked={searchMode === "memberId"}
                      onChange={() => setSearchMode("memberId")}
                    />
                    Member ID
                  </label>
                  <label style={{ marginLeft: "1rem" }}> OR </label>
                  <label style={{ marginLeft: "1rem" }}>
                    <input
                      type="radio"
                      value="nameHouse"
                      checked={searchMode === "nameHouse"}
                      onChange={() => setSearchMode("nameHouse")}
                    />
                    First Name &amp; House #
                  </label>
                </div>

                {searchMode === "memberId" && (
                  <div className="inline-fields">
                    <input
                      className="small-input"
                      type="number"
                      value={memberId}
                      onChange={(e) => setMemberId(e.target.value)}
                      placeholder="Enter Member ID"
                    />
                    <button
                      className="button"
                      type="submit"
                      disabled={searching}
                    >
                      {searching ? "Searching..." : "Search"}
                    </button>
                  </div>
                )}

                {searchMode === "nameHouse" && (
                  <div className="inline-fields">
                    <input
                      className="small-input"
                      type="text"
                      value={name}
                      onChange={(e) => setName(e.target.value)}
                      placeholder="First Name"
                    />
                    <input
                      className="small-input"
                      type="text"
                      value={houseNumber}
                      onChange={(e) => setHouseNumber(e.target.value)}
                      placeholder="House #"
                    />
                    <button
                      className="button"
                      type="submit"
                      disabled={searching}
                    >
                      {searching ? "Searching..." : "Search"}
                    </button>
                  </div>
                )}
              </form>
            )}

            {member && (
              <form className="rsvp-form" onSubmit={handleSubmitRSVP}>
                <div className="result-table-wrapper">
                  <h4>Membership Details</h4>
                  <table className="result-table">
                    <tbody>
                      <tr>
                        <th>Name</th>
                        <td>{member.name}</td>
                      </tr>
                      <tr>
                        <th>Address</th>
                        <td>{member.address}</td>
                      </tr>
                      <tr>
                        <th>Phone</th>
                        <td>{member.phone}</td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                <div className="result-table-wrapper">
                  <h4>Select Events to RSVP</h4>
                  <table className="result-table">
                    <thead>
                      <tr>
                        <th>Select</th>
                        <th>Program</th>
                        <th>Event</th>
                        <th>Date</th>
                        <th>RSVP Count</th>
                      </tr>
                    </thead>
                    <tbody>
                      {events.map((ev, idx) => (
                        <tr key={idx}>
                          <td>
                            <input
                              type="checkbox"
                              checked={selectedEvents[idx] !== undefined}
                              onChange={(e) =>
                                toggleEventSelection(idx, e.target.checked)
                              }
                            />
                          </td>
                          <td>{ev.programname}</td>
                          <td>{ev.eventname}</td>
                          <td>
                            {ev.eventday}, {ev.eventdate}
                          </td>
                          <td>
                            {selectedEvents[idx] !== undefined && (
                              <input
                                type="number"
                                className="small-input"
                                style={{ maxWidth: "40px" }}
                                min="0"
                                max="99"
                                value={selectedEvents[idx]}
                                onChange={(e) =>
                                  updateEventCount(idx, e.target.value)
                                }
                              />
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                <div className="inline-fields">
                  <label>Email Address</label>
                  <input
                    className="small-input"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Email Address"
                  />

                  {Object.keys(selectedEvents).length > 0 && (
                    <button
                      className="button"
                      type="submit"
                      disabled={submitting}
                    >
                      {submitting ? "Submitting..." : "Submit RSVP"}
                    </button>
                  )}
                  {submitMessage && (
                    <div style={{ color: "green", marginBottom: "10px" }}>
                      ✅ {submitMessage}
                    </div>
                  )}
                  {submitError && (
                    <div style={{ color: "red", marginBottom: "10px" }}>
                      ❌ {submitError}
                    </div>
                  )}
                </div>
              </form>
            )}

            {confirmation && (
              <div className="result-table-wrapper">
                <h4>RSVP Confirmation</h4>
                <table className="result-table">
                  <tbody>
                    <tr>
                      <th>Confirmation #</th>
                      <td>{confirmation.confNumber}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            )}
          </>
        )}

        {/* ----- TAB: Verify RSVP ----- */}
        {activeTab === "verify" && (
          <form className="verify-form" onSubmit={handleVerifyRSVP}>
            <h3>Verify / Modify RSVP</h3>
            <div className="inline-fields">
              <input
                className="small-input"
                type="text"
                value={verifyConfNumber}
                onChange={(e) => setVerifyConfNumber(e.target.value)}
                placeholder="Enter Confirmation #"
              />
              <button className="button" type="submit" disabled={verifying}>
                {verifying ? "Verifying..." : "Verify"}
              </button>
            </div>
            {verifyResult && (
              <div className="result-table-wrapper">
                <h4>RSVP Details</h4>
                {updateMessage && (
                  <div style={{ color: "green", marginBottom: "10px" }}>
                    ✅ {updateMessage}
                  </div>
                )}
                {updateError && (
                  <div style={{ color: "red", marginBottom: "10px" }}>
                    ❌ {updateError}
                  </div>
                )}
                <table className="result-table">
                  <thead>
                    <tr>
                      <th>Program</th>
                      <th>Event</th>
                      <th>Date</th>
                      <th>RSVP Count</th>
                      <th>Modify</th>
                    </tr>
                  </thead>
                  <tbody>
                    {verifyResult.rsvps?.length === 0 && (
                      <tr>
                        <td colSpan="5" style={{ textAlign: "center", color: "#888", fontStyle: "italic" }}>
                          No RSVP records found for this confirmation number.
                        </td>
                      </tr>
                    )}

                    {verifyResult.rsvps?.map((ev, idx) => (
                      <tr key={ev._id}>
                        <td>{ev.programname}</td>
                        <td>{ev.eventname}</td>
                        <td>{ev.eventday}, {ev.eventdate}</td>
                        <td>
                          {editIndex === idx ? (
                            <input
                              type="number"
                              min="1"
                              value={modifiedCount}
                              onChange={(e) => setModifiedCount(e.target.value)}
                              style={{ width: "60px" }}
                            />
                          ) : (
                            ev.rsvpcount
                          )}
                        </td>
                        <td>
                          {editIndex === idx ? (
                            <button onClick={() => handleUpdateRSVP(ev._id, modifiedCount)}>
                              Save
                            </button>
                          ) : (
                            <label>
                              <input
                                type="checkbox"
                                onChange={() => {
                                  setEditIndex(idx);
                                  setModifiedCount(ev.rsvpcount);
                                }}
                              />
                              Modify
                            </label>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </form>
        )}
      </div>
    </div>
  );
}




/* frontend/src/components/SubmitRSVP.js ======= Submit Working 090425 ====10:00pm =====
import React, { useEffect, useState } from "react";
import { getOpenEvents, searchMember, submitRSVP } from "../api";
import "../styles/SubmitRSVP.css";

export default function SubmitRSVP() {
  const [activeTab, setActiveTab] = useState("home"); // "home" | "submit" | "verify"

  // -------- Shared State --------
  const [events, setEvents] = useState([]);
  const [error, setError] = useState("");

  // -------- Submit RSVP State --------
  const [isLifeMember, setIsLifeMember] = useState(null);
  const [searchMode, setSearchMode] = useState("");
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [member, setMember] = useState(null);

  const [selectedEvents, setSelectedEvents] = useState({});
  const [email, setEmail] = useState("");
  const [confirmation, setConfirmation] = useState(null);

  const [loadingEvents, setLoadingEvents] = useState(true);
  const [searching, setSearching] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // -------- Verify RSVP State --------
  const [verifyConfNumber, setVerifyConfNumber] = useState("");
  const [verifyResult, setVerifyResult] = useState(null);
  const [verifying, setVerifying] = useState(false);

  // Load open events once
  useEffect(() => {
    (async () => {
      setLoadingEvents(true);
      try {
        const data = await getOpenEvents();
        setEvents(Array.isArray(data) ? data : []);
      } catch {
        setError("Failed to load open events.");
      } finally {
        setLoadingEvents(false);
      }
    })();
  }, []);

  // ---- Submit RSVP Handlers ----
  const handleSearch = async (e) => {
    e.preventDefault();
    setError("");
    setMember(null);

    if (searchMode === "memberId" && !memberId.trim()) {
      setError("Member ID is required.");
      return;
    }
    if (
      searchMode === "nameHouse" &&
      (!name.trim() || !houseNumber.trim())
    ) {
      setError("Name and House # are required.");
      return;
    }

    setSearching(true);
    try {
      const payload =
        searchMode === "memberId"
          ? { memberId: memberId.trim() }
          : { name: name.trim(), houseNumber: houseNumber.trim() };

      const result = await searchMember(payload);
      if (result && result.name) {
        setMember(result);
      } else {
        setError("Member not found.");
      }
    } catch (err) {
      setError(err.message || "Error searching member.");
    } finally {
      setSearching(false);
    }
  };

  const toggleEventSelection = (eventId, checked) => {
    setSelectedEvents((prev) => {
      const copy = { ...prev };
      if (checked) {
        copy[eventId] = 1;
      } else {
        delete copy[eventId];
      }
      return copy;
    });
  };

  const updateEventCount = (eventId, value) => {
    setSelectedEvents((prev) => ({
      ...prev,
      [eventId]: value ? parseInt(value, 10) : 0,
    }));
  };

  const handleSubmitRSVP = async (e) => {
    e.preventDefault();
    setError("");
    setConfirmation(null);

    if (!member) {
      setError("Please search and select a member first.");
      return;
    }
    if (Object.keys(selectedEvents).length === 0) {
      setError("Please select at least one event and provide RSVP count.");
      return;
    }

    const confNumber = Math.floor(100000 + Math.random() * 900000).toString();

    const payload = {
      memname: member.name,
      memaddress: member.address,
      memphonenumber: member.phone,
      rsvpconfnumber: confNumber,
      events: events
        .filter((_, idx) => selectedEvents[idx] !== undefined)
        .map((ev, idx) => ({
          programname: ev.programname,
          eventname: ev.eventname,
          eventday: ev.eventday,
          eventdate: ev.eventdate,
          rsvpcount: selectedEvents[idx],
        })),
    };

    setSubmitting(true);
    try {
      const res = await submitRSVP(payload);
      setConfirmation({ confNumber, ...res });
      setSelectedEvents({});
    } catch (err) {
      setError(err.message || "Error submitting RSVP.");
    } finally {
      setSubmitting(false);
    }
  };

  // ---- Verify RSVP Handlers ----
  const handleVerifyRSVP = async (e) => {
    e.preventDefault();
    setError("");
    setVerifyResult(null);

    if (!verifyConfNumber.trim()) {
      setError("Confirmation number is required.");
      return;
    }

    setVerifying(true);
    try {
      const data = await verifyRSVP(verifyConfNumber);
      setVerifyResult(data);
    } catch (err) {
          setError(err.message || "Error verifying RSVP.");
    } finally {
          setVerifying(false);
      }
  };

  // -------- UI --------
  return (
    <div className="page-wrapper">
      <div className="rsvp-container">
        <h2>JSMC RSVP</h2>

        {/* Tabs
        <div className="tab-header">
            <button
            className={activeTab === "home" ? "tab active" : "tab"}
            onClick={() => setActiveTab("home")}
          >
            Home
          </button>
          <button
            className={activeTab === "submit" ? "tab active" : "tab"}
            onClick={() => setActiveTab("submit")}
          >
            Submit RSVP
          </button>
          <button
            className={activeTab === "verify" ? "tab active" : "tab"}
            onClick={() => setActiveTab("verify")}
          >
            Verify / Modify RSVP
          </button>
        </div>

        {error && <div className="error-message">{error}</div>}
        
        {/* ----- TAB: Home ----- 
        {activeTab === "home" && (
          <>
          <form className="home">
            <h3>Welcome to JSMC RSVP Portal</h3>
            <h4>Please select Submit RSVP or Verify / Modify RSVP</h4>
          </form>
          </>
        )}

        {/* ----- TAB: Submit RSVP ----- 
        {activeTab === "submit" && (
          <>
            {isLifeMember === null && (
              <div className="form-section">
                <h3>Are you JSMC Life Member?</h3>
                <label>
                  <input
                    type="radio"
                    name="lifeMember"
                    value="yes"
                    onChange={() => setIsLifeMember("yes")}
                  />
                  Yes
                </label>
                <label style={{ marginLeft: "1rem" }}>
                  <input
                    type="radio"
                    name="lifeMember"
                    value="no"
                    onChange={() => setIsLifeMember("no")}
                  />
                  No
                </label>
              </div>
            )}

            {isLifeMember === "no" && (
              <div className="message">
                Thank you. RSVP is only for Life Members.
              </div>
            )}

            {isLifeMember === "yes" && !member && (
              <form className="search-form" onSubmit={handleSearch}>
                <h4>Retrieve membership using</h4>
                <div className="form-row">
                  <label>
                    <input
                      type="radio"
                      value="memberId"
                      checked={searchMode === "memberId"}
                      onChange={() => setSearchMode("memberId")}
                    />
                    Member ID
                  </label>
                  <label style={{ marginLeft: "1rem" }}> OR </label>
                  <label style={{ marginLeft: "1rem" }}>
                    <input
                      type="radio"
                      value="nameHouse"
                      checked={searchMode === "nameHouse"}
                      onChange={() => setSearchMode("nameHouse")}
                    />
                    First Name &amp; House #
                  </label>
                </div>

                {searchMode === "memberId" && (
                  <div className="inline-fields">
                    <input
                      className="small-input"
                      type="number"
                      value={memberId}
                      onChange={(e) => setMemberId(e.target.value)}
                      placeholder="Enter Member ID"
                    />
                    <button
                      className="button"
                      type="submit"
                      disabled={searching}
                    >
                      {searching ? "Searching..." : "Search"}
                    </button>
                  </div>
                )}

                {searchMode === "nameHouse" && (
                  <div className="inline-fields">
                    <input
                      className="small-input"
                      type="text"
                      value={name}
                      onChange={(e) => setName(e.target.value)}
                      placeholder="First Name"
                    />
                    <input
                      className="small-input"
                      type="text"
                      value={houseNumber}
                      onChange={(e) => setHouseNumber(e.target.value)}
                      placeholder="House #"
                    />
                    <button
                      className="button"
                      type="submit"
                      disabled={searching}
                    >
                      {searching ? "Searching..." : "Search"}
                    </button>
                  </div>
                )}
              </form>
            )}

            {member && (
              <form className="rsvp-form" onSubmit={handleSubmitRSVP}>
                <div className="result-table-wrapper">
                  <h4>Membership Details</h4>
                  <table className="result-table">
                    <tbody>
                      <tr>
                        <th>Name</th>
                        <td>{member.name}</td>
                      </tr>
                      <tr>
                        <th>Address</th>
                        <td>{member.address}</td>
                      </tr>
                      <tr>
                        <th>Phone</th>
                        <td>{member.phone}</td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                <div className="result-table-wrapper">
                  <h4>Select Events to RSVP</h4>
                  <table className="result-table">
                    <thead>
                      <tr>
                        <th>Select</th>
                        <th>Program</th>
                        <th>Event</th>
                        <th>Date</th>
                        <th>RSVP Count</th>
                      </tr>
                    </thead>
                    <tbody>
                      {events.map((ev, idx) => (
                        <tr key={idx}>
                          <td>
                            <input
                              type="checkbox"
                              checked={selectedEvents[idx] !== undefined}
                              onChange={(e) =>
                                toggleEventSelection(idx, e.target.checked)
                              }
                            />
                          </td>
                          <td>{ev.programname}</td>
                          <td>{ev.eventname}</td>
                          <td>
                            {ev.eventday}, {ev.eventdate}
                          </td>
                          <td>
                            {selectedEvents[idx] !== undefined && (
                              <input
                                type="number"
                                className="small-input"
                                style={{ maxWidth: "40px" }}
                                min="0"
                                max="99"
                                value={selectedEvents[idx]}
                                onChange={(e) =>
                                  updateEventCount(idx, e.target.value)
                                }
                              />
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                <div className="inline-fields">
                  <label>Email Address</label>
                  <input
                    className="small-input"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Email Address"
                  />

                  {Object.keys(selectedEvents).length > 0 && (
                    <button
                      className="button"
                      type="submit"
                      disabled={submitting}
                    >
                      {submitting ? "Submitting..." : "Submit RSVP"}
                    </button>
                  )}
                </div>
              </form>
            )}

            {confirmation && (
              <div className="result-table-wrapper">
                <h4>RSVP Confirmation</h4>
                <table className="result-table">
                  <tbody>
                    <tr>
                      <th>Confirmation #</th>
                      <td>{confirmation.confNumber}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            )}
          </>
        )}

        {/* ----- TAB: Verify RSVP -----
        {activeTab === "verify" && (
          <form className="verify-form" onSubmit={handleVerifyRSVP}>
            <h3>Verify / Modify RSVP</h3>
            <div className="inline-fields">
              <input
                className="small-input"
                type="text"
                value={verifyConfNumber}
                onChange={(e) => setVerifyConfNumber(e.target.value)}
                placeholder="Enter Confirmation #"
              />
              <button className="button" type="submit" disabled={verifying}>
                {verifying ? "Verifying..." : "Verify"}
              </button>
            </div>

            {verifyResult && (
              <div className="result-table-wrapper">
                <h4>RSVP Details</h4>
                <table className="result-table">
                  <thead>
                    <tr>
                      <th>Program</th>
                      <th>Event</th>
                      <th>Date</th>
                      <th>RSVP Count</th>
                    </tr>
                  </thead>
                  <tbody>
                    {verifyResult.events?.map((ev, idx) => (
                      <tr key={idx}>
                        <td>{ev.programname}</td>
                        <td>{ev.eventname}</td>
                        <td>
                          {ev.eventday}, {ev.eventdate}
                        </td>
                        <td>{ev.rsvpcount}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </form>
        )}
      </div>
    </div>
  );
}
*/


/* frontend/src/components/SubmitRSVP.js ======= Working 090425 - 8:00am =======
// frontend/src/components/SubmitRSVP.js
import React, { useEffect, useState } from "react";
import { getOpenEvents, searchMember, submitRSVP } from "../api";
import "../styles/SubmitRSVP.css";

export default function SubmitRSVP() {
  // Step control
  const [isLifeMember, setIsLifeMember] = useState(null); // "yes" | "no"
  const [searchMode, setSearchMode] = useState(""); // "memberId" | "nameHouse"

  // Event state
  const [events, setEvents] = useState([]);
  const [selectedEvents, setSelectedEvents] = useState({}); // {eventId: rsvpCount}

  // Search state
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [member, setMember] = useState(null);

  // UI state
  const [loadingEvents, setLoadingEvents] = useState(true);
  const [searching, setSearching] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState("");
  const [confirmation, setConfirmation] = useState(null); // store response after submit

  const [email, setEmail] = useState("");

  // Load open events
  useEffect(() => {
    (async () => {
      setLoadingEvents(true);
      try {
        const data = await getOpenEvents();
        setEvents(Array.isArray(data) ? data : []);
      } catch {
        setError("Failed to load open events.");
      } finally {
        setLoadingEvents(false);
      }
    })();
  }, []);

  // Member search handler
  const handleSearch = async (e) => {
    e.preventDefault();
    setError("");
    setMember(null);

    if (searchMode === "memberId" && !memberId.trim()) {
      setError("Member ID is required.");
      return;
    }
    if (searchMode === "nameHouse" && (!name.trim() || !houseNumber.trim())) {
      setError("Name and House # are required.");
      return;
    }

    setSearching(true);
    try {
      const payload =
        searchMode === "memberId"
          ? { memberId: memberId.trim() }
          : { name: name.trim(), houseNumber: houseNumber.trim() };

      const result = await searchMember(payload);
      if (result && result.name) {
        setMember(result);
      } else {
        setError("Member not found.");
      }
    } catch (err) {
      setError(err.message || "Error searching member.");
    } finally {
      setSearching(false);
    }
  };

  // Event selection toggle
  const toggleEventSelection = (eventId, checked) => {
    setSelectedEvents((prev) => {
      const copy = { ...prev };
      if (checked) {
        copy[eventId] = 1; // default count 1
      } else {
        delete copy[eventId];
      }
      return copy;
    });
  };

  // RSVP count update
  const updateEventCount = (eventId, value) => {
    setSelectedEvents((prev) => ({
      ...prev,
      [eventId]: value ? parseInt(value, 10) : 0,
    }));
  };

  // RSVP submit handler
  const handleSubmitRSVP = async (e) => {
    e.preventDefault();
    setError("");
    setConfirmation(null);

    if (!member) {
      setError("Please search and select a member first.");
      return;
    }
    if (Object.keys(selectedEvents).length === 0) {
      setError("Please select at least one event and provide RSVP count.");
      return;
    }

    const confNumber = Math.floor(100000 + Math.random() * 900000).toString();

    const payload = {
      memname: member.name,
      memaddress: member.address,
      memphonenumber: member.phone,
      rsvpconfnumber: confNumber,
      events: events
        .filter((ev, idx) => selectedEvents[idx] !== undefined)
        .map((ev, idx) => ({
          programname: ev.programname,
          eventname: ev.eventname,
          eventday: ev.eventday,
          eventdate: ev.eventdate,
          rsvpcount: selectedEvents[idx],
        })),
    };

    setSubmitting(true);
    try {
      const res = await submitRSVP(payload);
      setConfirmation({ confNumber, ...res });
      // Reset selections
      setSelectedEvents({});
    } catch (err) {
      setError(err.message || "Error submitting RSVP.");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="page-wrapper">
      <div className="rsvp-container">
        <h2>Welcome to JSMC RSVP Portal</h2>
        {error && <div className="error-message">{error}</div>}

        {/* Step 1: Life Member Question
        {isLifeMember === null && (
          <div className="form-section">
            <h3>Are you JSMC Life Member?</h3>
            <label>
              <input
                type="radio"
                name="lifeMember"
                value="yes"
                onChange={() => setIsLifeMember("yes")}
              />
              Yes
            </label>
            <label style={{ marginLeft: "1rem" }}>
              <input
                type="radio"
                name="lifeMember"
                value="no"
                onChange={() => setIsLifeMember("no")}
              />
              No
            </label>
          </div>
        )}

        {/* If No, stop
        {isLifeMember === "no" && (
          <div className="message">Thank you. RSVP is only for Life Members.</div>
        )}

        {/* Step 2: Member Search
        {isLifeMember === "yes" && !member && (
          <form className="search-form" onSubmit={handleSearch}>
            <h4>Retrieve membership using</h4>
            <div className="form-row">
              <label>
                <input
                  type="radio"
                  value="memberId"
                  checked={searchMode === "memberId"}
                  onChange={() => setSearchMode("memberId")}
                />
                Member ID
              </label>
              <label style={{ marginLeft: "1rem" }}> OR </label>
              <label style={{ marginLeft: "1rem" }}>
                <input
                  type="radio"
                  value="nameHouse"
                  checked={searchMode === "nameHouse"}
                  onChange={() => setSearchMode("nameHouse")}
                />
                First Name &amp; House #
              </label>
            </div>

            {searchMode === "memberId" && (
              <div className="inline-fields">
                <input
                  className="small-input"
                  type="number"
                  value={memberId}
                  onChange={(e) => setMemberId(e.target.value)}
                  placeholder="Enter Member ID"
                />
                <button className="button" type="submit" disabled={searching}>
                  {searching ? "Searching..." : "Search"}
                </button>
              </div>
            )}

            {searchMode === "nameHouse" && (
              <div className="inline-fields">
                <input
                  className="small-input"
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="First Name"
                />
                <input
                  className="small-input"
                  type="text"
                  value={houseNumber}
                  onChange={(e) => setHouseNumber(e.target.value)}
                  placeholder="House #"
                />
                <button className="button" type="submit" disabled={searching}>
                  {searching ? "Searching..." : "Search"}
                </button>
              </div>
            )}
          </form>
        )}

        {/* Step 3: Membership Details + Event Selection
        {member && (
          <form className="rsvp-form" onSubmit={handleSubmitRSVP}>
            {/*<h4>Membership Details</h4>
            <div className="result-table-wrapper" style={{ marginTop: "0.5rem" }}>
            <div className="result-table-wrapper">
              <h4>Membership Details</h4>
              <table className="result-table">
                <tbody>
                  <tr>
                    <th>Name</th>
                    <td>{member.name}</td>
                  </tr>
                  <tr>
                    <th>Address</th>
                    <td>{member.address}</td>
                  </tr>
                  <tr>
                    <th>Phone</th>
                    <td>{member.phone}</td>
                  </tr>
                </tbody>
              </table>
            </div>

            {/*<h4 style={{ marginTop: "1rem" }}>Select Events</h4>
            <div className="result-table-wrapper"style={{ marginTop: "0.5rem" }}>
              <div className="result-table-wrapper">
              <h4>Select Events to RSVP</h4>
              <table className="result-table">
                <thead>
                  <tr>
                    <th>Select</th>
                    <th>Program</th>
                    <th>Event</th>
                    <th>Date</th>
                    <th>RSVP Count</th>
                  </tr>
                </thead>
                <tbody>
                  {events.map((ev, idx) => (
                    <tr key={idx}>
                      <td>
                        <input
                          type="checkbox"
                          checked={selectedEvents[idx] !== undefined}
                          onChange={(e) =>
                            toggleEventSelection(idx, e.target.checked)
                          }
                        />
                      </td>
                      <td>{ev.programname}</td>
                      <td>{ev.eventname}</td>
                      <td>
                        {ev.eventday}, {ev.eventdate}
                      </td>
                      <td>
                        {selectedEvents[idx] !== undefined && (
                          <input
                            type="number"
                            className="small-input"
                            style={{ maxWidth: "40px" }}
                            min="0"
                            max="99"
                            value={selectedEvents[idx]}
                            onChange={(e) =>
                              updateEventCount(idx, e.target.value)
                            }
                          />
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="inline-fields">
              <label>Email Address</label>
                <input
                  className="small-input"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="Email Address"
                />
                
            {Object.keys(selectedEvents).length > 0 && (
              <button className="button" type="submit" disabled={submitting}>
                {submitting ? "Submitting..." : "Submit RSVP"}
              </button>
            )}
            </div>
          </form>
        )}

        {/* Step 4: Confirmation Table
        {confirmation && (
          <div className="result-table-wrapper">
            <h4>RSVP Confirmation</h4>
            <table className="result-table">
              <tbody>
                <tr>
                  <th>Confirmation #</th>
                  <td>{confirmation.confNumber}</td>
                </tr>
                {/*<tr>
                  <th>Name</th>
                  <td>{member?.name}</td>
                </tr>
                <tr>
                  <th>Phone</th>
                  <td>{member?.phone}</td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}
*/


/* frontend/src/components/SubmitRSVP.js ======= Working 090425 - 10:00am =======
import React, { useEffect, useMemo, useState } from "react";
import { getOpenEvents, searchMember, submitRSVP } from "../api";
import "../styles/SubmitRSVP.css";

export default function SubmitRSVP() {
  const [events, setEvents] = useState([]);
  const [selectedIndex, setSelectedIndex] = useState(-1);

  const [searchMode, setSearchMode] = useState("memberId");
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");

  const [member, setMember] = useState(null);
  const [rsvpCount, setRsvpCount] = useState(1);
  const [confNumber, setConfNumber] = useState("");

  const [loadingEvents, setLoadingEvents] = useState(true);
  const [searching, setSearching] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");

  const [lastRSVP, setLastRSVP] = useState(null); // store last submitted RSVP for confirmation table

  const selectedEvent = useMemo(
    () => (selectedIndex >= 0 ? events[selectedIndex] : null),
    [events, selectedIndex]
  );

  useEffect(() => {
    (async () => {
      setLoadingEvents(true);
      setError("");
      try {
        const data = await getOpenEvents();
        setEvents(Array.isArray(data) ? data : []);
      } catch {
        setError("Failed to load open events.");
      } finally {
        setLoadingEvents(false);
      }
    })();
  }, []);

  const handleSearch = async (e) => {
    e.preventDefault();
    setError("");
    setMessage("");
    setMember(null);

    if (searchMode === "memberId" && !memberId.trim()) {
      setError("Member ID is required.");
      return;
    }
    if (searchMode === "nameHouse" && (!name.trim() || !houseNumber.trim())) {
      setError("Name and House # are required.");
      return;
    }

    setSearching(true);
    try {
      const payload =
        searchMode === "memberId"
          ? { memberId: memberId.trim() }
          : { name: name.trim(), houseNumber: houseNumber.trim() };

      const result = await searchMember(payload);
      if (result && result.name) {
        setMember(result);
      } else {
        setError("Member not found.");
      }
    } catch (err) {
      setError(err.message || "Error searching member.");
    } finally {
      setSearching(false);
    }
  };

  const handleSubmitRSVP = async (e) => {
    e.preventDefault();
    setError("");
    setMessage("");

    if (!selectedEvent) {
      setError("Please select an event.");
      return;
    }
    if (!member) {
      setError("Please search and select a member first.");
      return;
    }

    // generate confirmation number upon submit
    const conf = Math.floor(100000 + Math.random() * 900000).toString();
    setConfNumber(conf);

    const payload = {
      eventdate: selectedEvent.eventdate,
      eventday: selectedEvent.eventday,
      memname: member.name,
      memaddress: member.address,
      memphonenumber: member.phone,
      rsvpcount: Number(rsvpCount) || 1,
      rsvpconfnumber: conf,
      eventname: selectedEvent.eventname,
      programname: selectedEvent.programname,
    };

    setSubmitting(true);
    try {
      await submitRSVP(payload);
      setLastRSVP(payload); // store for confirmation table
      setMessage("RSVP submitted successfully!");
      // reset member search & RSVP fields
      setMember(null);
      setMemberId("");
      setName("");
      setHouseNumber("");
      setRsvpCount(1);
      setConfNumber(""); // will regenerate on next submission
    } catch (err) {
      setError(err.message || "Error submitting RSVP.");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="page-wrapper">
      <div className="rsvp-container">
        <h2>Welcome to JSMC RSVP Portal</h2>

        {message && <div className="message">{message}</div>}
        {error && <div className="error-message">{error}</div>}

        {/* Event selection }
        <div className="form-section">
          <h3>Select an available event to RSVP</h3>
          <select
            value={selectedIndex}
            onChange={(e) => {
              setSelectedIndex(Number(e.target.value));
              setMember(null);
              setMessage("");
              setError("");
            }}
            disabled={loadingEvents}
          >
            <option value={-1} disabled>
              {loadingEvents ? "Loading available events..." : "Select an Event"}
            </option>
            {events.map((ev, idx) => (
              <option key={`${ev.programname}-${ev.eventname}-${idx}`} value={idx}>
                {ev.programname} — {ev.eventname} ({ev.eventday}, {ev.eventdate})
              </option>
            ))}
          </select>
        </div>

        {/* Member search }
        <form className="search-form" onSubmit={handleSearch}>
          <h4>Retrieve member by entering Member ID or First Name & House #</h4>

          <div className="form-row">
            <label className="radio-label">
              <input
                type="radio"
                value="memberId"
                checked={searchMode === "memberId"}
                onChange={() => setSearchMode("memberId")}
              />
              Member ID
            </label>

            <label className="radio-label">
              <input
                type="radio"
                value="nameHouse"
                checked={searchMode === "nameHouse"}
                onChange={() => setSearchMode("nameHouse")}
              />
              First Name & House #
            </label>
          </div>

          {searchMode === "memberId" ? (
            <div className="inline-fields">
              <input
                className="small-input"
                type="number"
                value={memberId}
                onChange={(e) => setMemberId(e.target.value)}
                placeholder="Enter Member ID"
                required
              />
              <button className="button" type="submit" disabled={searching}>
                {searching ? "Searching..." : "Search"}
              </button>
            </div>
          ) : (
            <div className="inline-fields">
              <input
                className="small-input"
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Full Name"
                required
              />
              <span className="inline-label">House #</span>
              <input
                className="small-input"
                type="text"
                value={houseNumber}
                onChange={(e) => setHouseNumber(e.target.value)}
                placeholder="e.g. 123"
                required
              />
              <button className="button" type="submit" disabled={searching}>
                {searching ? "Searching..." : "Search"}
              </button>
            </div>
          )}
        </form>

        {/* Member result + RSVP }
{member && (
  <form className="rsvp-form" onSubmit={handleSubmitRSVP}>
    <h4>Membership Details</h4>

    <div className="last-rsvp">
      <table>
        <tbody>
          <tr>
            <th>Name</th>
            <td>{member.name}</td>
          </tr>
          <tr>
            <th>Address</th>
            <td>{member.address}</td>
          </tr>
          <tr>
            <th>Phone</th>
            <td>{member.phone}</td>
          </tr>
        </tbody>
      </table>
    </div>

    <div className="form-row" style={{ marginTop: "0.5rem" }}>
      <label className="inline-label">RSVP Count</label>
      <input
        className="small-input rsvp-count-input"
        type="number"
        min="1"
        max="99"
        value={rsvpCount}
        onChange={(e) => setRsvpCount(e.target.value)}
        required
      />

      <button className="button" type="submit" disabled={submitting}>
        {submitting ? "Submitting..." : "Submit RSVP"}
      </button>
    </div>
  </form>
)}


        {/* RSVP Confirmation Table }
        {lastRSVP && (
          <div className="last-rsvp">
            <h4>RSVP Confirmation</h4>
            <table>
              <tbody>
                <tr>
                  <th>Member</th>
                  <td>{lastRSVP.memname}</td>
                </tr>
                <tr>
                  <th>Address</th>
                  <td>{lastRSVP.memaddress}</td>
                </tr>
                <tr>
                  <th>Phone</th>
                  <td>{lastRSVP.memphonenumber}</td>
                </tr>
                <tr>
                  <th>Event</th>
                  <td>{lastRSVP.eventname} — {lastRSVP.programname}</td>
                </tr>
                <tr>
                  <th>Event Date</th>
                  <td>{lastRSVP.eventday}, {lastRSVP.eventdate}</td>
                </tr>
                <tr>
                  <th>RSVP Count</th>
                  <td>{lastRSVP.rsvpcount}</td>
                </tr>
                <tr>
                  <th>Conf #</th>
                  <td>{lastRSVP.rsvpconfnumber}</td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}


{/* frontend/src/components/SubmitRSVP.js ======= Working 090425 - 10:00am =======*/

/*import React, { useState, useEffect } from "react";
import { searchMember, getOpenEvents, submitRSVP } from "../api";
import "../styles/SubmitRSVP.css";

function SubmitRSVP() {
  const [events, setEvents] = useState([]);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [searchMode, setSearchMode] = useState("memberId");
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [member, setMember] = useState(null);
  const [rsvpCount, setRsvpCount] = useState("");
  const [confNumber, setConfNumber] = useState("");
  const [message, setMessage] = useState("");
  const [lastRSVP, setLastRSVP] = useState(null); // store last submitted RSVP

  useEffect(() => {
    async function fetchEvents() {
      const openEvents = await getOpenEvents();
      setEvents(openEvents);
    }
    fetchEvents();
  }, []);

  const handleSearch = async (e) => {
    e.preventDefault();
    setMessage("");
    setMember(null);
    try {
      const payload =
        searchMode === "memberId"
          ? { memberId }
          : { name, houseNumber };
      const data = await searchMember(payload);
      setMember(data);
    } catch (err) {
      setMessage(err.message || "Member not found");
    }
  };

  const handleRSVP = async (e) => {
    e.preventDefault();
    setMessage("");
    const conf = Math.floor(100000 + Math.random() * 900000).toString();
    setConfNumber(conf);

    const payload = {
      eventdate: selectedEvent.eventdate,
      eventday: selectedEvent.eventday,
      programname: selectedEvent.programname,
      eventname: selectedEvent.eventname,
      memname: member.name,
      memaddress: member.address,
      memphonenumber: member.phone,
      rsvpcount: rsvpCount,
      rsvpconfnumber: conf,
    };

    try {
      await submitRSVP(payload);
      setMessage(`✅ RSVP submitted! Confirmation #: ${conf}`);
      setLastRSVP(payload); // save last RSVP to display

      // Reset search and RSVP fields
      setMember(null);
      setMemberId("");
      setName("");
      setHouseNumber("");
      setRsvpCount("");
      setSelectedEvent(null);
    } catch (err) {
      setMessage(err.message || "❌ Failed to submit RSVP");
    }
  };

  return (
    <div className="rsvp-container">
      <h2>Submit RSVP</h2>
      {message && <p className="message">{message}</p>}

      <div className="form-section">
        <label>Open Event:</label>
        <select
          value={selectedEvent ? selectedEvent.eventname : ""}
          onChange={(e) =>
            setSelectedEvent(events.find((ev) => ev.eventname === e.target.value))
          }
        >
          <option value="">-- Select Event --</option>
          {events.map((ev, idx) => (
            <option key={idx} value={ev.eventname}>
              {ev.programname} - {ev.eventname} ({ev.eventdate})
            </option>
          ))}
        </select>
      </div>

      {selectedEvent && (
        <>
          <form onSubmit={handleSearch} className="search-form">
            <div className="form-row">
              <label className="radio-label">
                <input
                  type="radio"
                  value="memberId"
                  checked={searchMode === "memberId"}
                  onChange={() => setSearchMode("memberId")}
                />
                Member ID
              </label>
              {searchMode === "memberId" && (
                <input
                  type="number"
                  value={memberId}
                  onChange={(e) => setMemberId(e.target.value)}
                  placeholder="Enter Member ID"
                  required
                />
              )}
            </div>

            <div className="form-row">
              <label className="radio-label">
                <input
                  type="radio"
                  value="nameHouse"
                  checked={searchMode === "nameHouse"}
                  onChange={() => setSearchMode("nameHouse")}
                />
                Name
              </label>
              {searchMode === "nameHouse" && (
                <div className="inline-fields">
                  <input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="Name"
                    required
                  />
                  <label> & House # </label>
                  <input
                    type="text"
                    value={houseNumber}
                    onChange={(e) => setHouseNumber(e.target.value)}
                    placeholder="House #"
                    required
                  />
                </div>
              )}
            </div>
            <button type="submit">Search Member</button>
          </form>
        </>
      )}

      {member && (
        <form onSubmit={handleRSVP} className="rsvp-form">
          <p>
            Member: {member.name}, {member.address}, {member.phone}
          </p>
          <input
            type="number"
            value={rsvpCount}
            onChange={(e) => setRsvpCount(e.target.value)}
            placeholder="RSVP Count"
            required
          />
          <button type="submit">Submit RSVP</button>
        </form>
      )}

      {/* Last submitted RSVP table }
      {lastRSVP && (
        <div className="last-rsvp">
          <h3>Last Submitted RSVP</h3>
          <table>
            <tbody>
              <tr>
                <th>Program</th>
                <td>{lastRSVP.programname}</td>
              </tr>
              <tr>
                <th>Event</th>
                <td>{lastRSVP.eventname}</td>
              </tr>
              <tr>
                <th>Date</th>
                <td>{lastRSVP.eventdate}</td>
              </tr>
              <tr>
                <th>Day</th>
                <td>{lastRSVP.eventday}</td>
              </tr>
              <tr>
                <th>Member Name</th>
                <td>{lastRSVP.memname}</td>
              </tr>
              <tr>
                <th>Address</th>
                <td>{lastRSVP.memaddress}</td>
              </tr>
              <tr>
                <th>Phone</th>
                <td>{lastRSVP.memphonenumber}</td>
              </tr>
              <tr>
                <th>RSVP Count</th>
                <td>{lastRSVP.rsvpcount}</td>
              </tr>
              <tr>
                <th>Confirmation #</th>
                <td>{lastRSVP.rsvpconfnumber}</td>
              </tr>
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

export default SubmitRSVP;
*/





// frontend/src/components/SubmitRSVP.js
import React, { useEffect, useMemo, useState } from "react";
import { getOpenEvents, searchMember, submitRSVP } from "../api";
import "../styles/SubmitRSVP.css"; // exact same file you had

export default function SubmitRSVP() {
  const [events, setEvents] = useState([]);
  const [selectedIndex, setSelectedIndex] = useState(-1);

  const [searchMode, setSearchMode] = useState("memberId");
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");

  const [member, setMember] = useState(null);
  const [rsvpCount, setRsvpCount] = useState(1);

  const [loadingEvents, setLoadingEvents] = useState(true);
  const [searching, setSearching] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");

  const [lastRSVP, setLastRSVP] = useState(null); // shows confirmation after submit

  const selectedEvent = useMemo(
    () => (selectedIndex >= 0 ? events[selectedIndex] : null),
    [events, selectedIndex]
  );

  useEffect(() => {
    (async () => {
      setLoadingEvents(true);
      setError("");
      try {
        const data = await getOpenEvents();
        setEvents(Array.isArray(data) ? data : []);
      } catch {
        setError("Failed to load open events.");
      } finally {
        setLoadingEvents(false);
      }
    })();
  }, []);

  const handleSearch = async (e) => {
    e.preventDefault();
    setError("");
    setMessage("");
    setMember(null);

    if (searchMode === "memberId" && !memberId.trim()) {
      setError("Member ID is required.");
      return;
    }
    if (searchMode === "nameHouse" && (!name.trim() || !houseNumber.trim())) {
      setError("Name and House # are required.");
      return;
    }

    setSearching(true);
    try {
      const payload =
        searchMode === "memberId"
          ? { memberId: memberId.trim() }
          : { name: name.trim(), houseNumber: houseNumber.trim() };

      const result = await searchMember(payload);
      if (result && (result.name || result.fullName || result.memname)) {
        // normalize different response shapes
        const normalized = {
          name: result.name ?? result.fullName ?? result.memname,
          address: result.address ?? result.memaddress,
          phone: result.phone ?? result.phonenumber ?? result.memphonenumber,
        };
        setMember(normalized);
      } else {
        setError("Member not found.");
      }
    } catch (err) {
      setError(err.message || "Error searching member.");
    } finally {
      setSearching(false);
    }
  };

  const handleSubmitRSVP = async (e) => {
    e.preventDefault();
    setError("");
    setMessage("");
    setLastRSVP(null);

    if (!selectedEvent) {
      setError("Please select an event.");
      return;
    }
    if (!member) {
      setError("Please search and select a member first.");
      return;
    }
    if (!rsvpCount || Number(rsvpCount) <= 0) {
      setError("Please enter RSVP count (1 or more).");
      return;
    }

    // generate confirmation number here (backend could override/generate too)
    const conf = Math.floor(100000 + Math.random() * 900000).toString();

    const payload = {
      eventdate: selectedEvent.eventdate,
      eventday: selectedEvent.eventday,
      memname: member.name,
      memaddress: member.address,
      memphonenumber: member.phone,
      rsvpcount: Number(rsvpCount),
      rsvpconfnumber: conf,
      eventname: selectedEvent.eventname,
      programname: selectedEvent.programname,
    };

    setSubmitting(true);
    try {
      // submitRSVP should accept this payload and return something (we'll fall back to payload)
      const response = await submitRSVP(payload);

      // prefer server-returned rsvp object or confirmation; otherwise use our payload
      const returned =
        (response && (response.rsvp || response.saved || response)) ?? payload;

      // Normalize lastRSVP for rendering the confirmation table consistently:
      const normalizedLast = {
        memname: returned.memname ?? returned.memname ?? payload.memname ?? payload.memname ?? member.name,
        memaddress: returned.memaddress ?? returned.memaddress ?? payload.memaddress ?? member.address,
        memphonenumber: returned.memphonenumber ?? returned.memphonenumber ?? payload.memphonenumber ?? member.phone,
        eventname: returned.eventname ?? payload.eventname ?? selectedEvent.eventname,
        programname: returned.programname ?? payload.programname ?? selectedEvent.programname,
        eventdate: returned.eventdate ?? payload.eventdate ?? selectedEvent.eventdate,
        eventday: returned.eventday ?? payload.eventday ?? selectedEvent.eventday,
        rsvpcount: returned.rsvpcount ?? payload.rsvpcount ?? rsvpCount,
        rsvpconfnumber:
          (returned.rsvpconfnumber ?? response.confirmationNumber ?? payload.rsvpconfnumber ?? conf) + "",
      };

      setLastRSVP(normalizedLast);

      setMessage(`RSVP submitted! Confirmation #: ${normalizedLast.rsvpconfnumber}`);

      // reset search fields, keep selectedEvent if you want
      setMember(null);
      setMemberId("");
      setName("");
      setHouseNumber("");
      setRsvpCount(1);
    } catch (err) {
      setError(err.message || "Error submitting RSVP.");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="page-wrapper">
      <div className="rsvp-container">
        <h2>Welcome to JSMC RSVP Portal</h2>

        {message && <div className="message">{message}</div>}
        {error && <div className="error-message">{error}</div>}

        {/* Event selection */}
        <div className="form-section">
          <h3>Select an available event to RSVP</h3>
          <select
            value={selectedIndex}
            onChange={(e) => {
              setSelectedIndex(Number(e.target.value));
              setMember(null);
              setMessage("");
              setError("");
            }}
            disabled={loadingEvents}
          >
            <option value={-1} disabled>
              {loadingEvents ? "Loading available events..." : "Select an Event"}
            </option>
            {events.map((ev, idx) => (
              <option key={`${ev.programname}-${ev.eventname}-${idx}`} value={idx}>
                {ev.programname} — {ev.eventname} ({ev.eventday}, {ev.eventdate})
              </option>
            ))}
          </select>
        </div>

        {/* Member search */}
        <form className="search-form" onSubmit={handleSearch}>
          <h4>Retrieve membership by entering Member ID or First Name & House Number</h4>

          <div className="form-row">
            <label className="radio-label">
              <input
                type="radio"
                value="memberId"
                checked={searchMode === "memberId"}
                onChange={() => setSearchMode("memberId")}
              />
              Member ID
            </label>

            <label className="radio-label">
              <input
                type="radio"
                value="nameHouse"
                checked={searchMode === "nameHouse"}
                onChange={() => setSearchMode("nameHouse")}
              />
              First Name &amp; House #
            </label>
          </div>

          {searchMode === "memberId" ? (
            <div className="inline-fields">
              <input
                className="small-input"
                type="number"
                value={memberId}
                onChange={(e) => setMemberId(e.target.value)}
                placeholder="Enter Member ID"
                required
              />
              <button className="button" type="submit" disabled={searching}>
                {searching ? "Searching..." : "Search"}
              </button>
            </div>
          ) : (
            <div className="inline-fields">
              <input
                className="small-input"
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Full Name"
                required
              />
              <span className="inline-label">House #</span>
              <input
                className="small-input"
                type="text"
                value={houseNumber}
                onChange={(e) => setHouseNumber(e.target.value)}
                placeholder="e.g. 123"
                required
              />
              <button className="button" type="submit" disabled={searching}>
                {searching ? "Searching..." : "Search"}
              </button>
            </div>
          )}
        </form>

        {/* Member result + RSVP */}
        {member && (
          <form className="rsvp-form" onSubmit={handleSubmitRSVP}>
            <h4 style={{ marginBottom: "0.5rem" }}>Membership Details</h4>

            {/* use .last-rsvp wrapper so it matches confirmation styling exactly */}
            <div className="last-rsvp">
              <table>
                <tbody>
                  <tr>
                    <th>Name</th>
                    <td>{member.name}</td>
                  </tr>
                  <tr>
                    <th>Address</th>
                    <td>{member.address}</td>
                  </tr>
                  <tr>
                    <th>Phone</th>
                    <td>{member.phone}</td>
                  </tr>
                </tbody>
              </table>
            </div>

            <div className="form-row" style={{ marginTop: "0.5rem", alignItems: "center" }}>
              <label className="inline-label">RSVP Count</label>
              <input
                className="small-input rsvp-count-input"
                type="number"
                min="1"
                max="99"
                value={rsvpCount}
                onChange={(e) => setRsvpCount(e.target.value)}
                required
              />

              <button className="button" type="submit" disabled={submitting}>
                {submitting ? "Submitting..." : "Submit RSVP"}
              </button>
            </div>
          </form>
        )}

        {/* RSVP Confirmation Table (matches membership table style) */}
        {lastRSVP && (
          <div className="last-rsvp" style={{ marginTop: "0.6rem" }}>
            <h4 style={{ marginBottom: "0.5rem" }}>RSVP Confirmation</h4>
            <table>
              <tbody>
                <tr>
                  <th>Member</th>
                  <td>{lastRSVP.memname}</td>
                </tr>
                <tr>
                  <th>Address</th>
                  <td>{lastRSVP.memaddress}</td>
                </tr>
                <tr>
                  <th>Phone</th>
                  <td>{lastRSVP.memphonenumber}</td>
                </tr>
                <tr>
                  <th>Event</th>
                  <td>{lastRSVP.eventname} — {lastRSVP.programname}</td>
                </tr>
                <tr>
                  <th>Event Date</th>
                  <td>{lastRSVP.eventday}, {lastRSVP.eventdate}</td>
                </tr>
                <tr>
                  <th>RSVP Count</th>
                  <td>{lastRSVP.rsvpcount}</td>
                </tr>
                <tr>
                  <th>Conf #</th>
                  <td>{lastRSVP.rsvpconfnumber}</td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

//================
import React, { useState, useEffect } from 'react';
import { HashRouter as Router, Route, Routes } from 'react-router-dom';
import SubmitForm from './components/SubmitForm';
import AddProgramForm from "./components/AddProgramForm";
//import TablePage from './components/TablePage';
//import keepServerAlive from './components/KeepServerAlive';
//import ReportPage from './components/ReportPage';
import './styles/App.css';

function App() {
  const [pollRefreshTrigger, setPollRefreshTrigger] = useState(0);

/*  useEffect(() => {
    keepServerAlive();
  }, []);*/

    return (
    <Router>
      <Routes>
        <Route path="/" element={<SubmitForm />} />
        <Route path="/add-program" element={<AddProgramForm />} />
      </Routes>
    </Router>
  );
  /*
  return (
    <Router>
      <Routes>
        <Route path="/" element={<SubmitForm />} />
        <Route path="/data" element={<TablePage pollRefreshTrigger={pollRefreshTrigger} setPollRefreshTrigger={setPollRefreshTrigger} />} />
        <Route path="/report" element={<ReportPage />} />
      </Routes>
    </Router>
  );*/
}

export default App;




import React, { useState } from "react";
import { searchMember } from "../api";
import "../styles/SubmitForm.css";

function SubmitForm() {
  const [searchMode, setSearchMode] = useState("memberId");
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [result, setResult] = useState(null);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setResult(null);

    try {
      setIsLoading(true);
      const payload =
        searchMode === "memberId"
          ? { memberId }
          : { name, houseNumber };

      const data = await searchMember(payload);
      setResult(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="search-container">
      <h2>JSMC RSVP</h2>
      <h3>Search Member</h3>

      {error && <p className="error-message">{error}</p>}

      <form onSubmit={handleSubmit} className="search-form">
        {/* Search by Member ID */}
        <div className="form-row">
          <label className="radio-label">
            <input
              type="radio"
              value="memberId"
              checked={searchMode === "memberId"}
              onChange={() => setSearchMode("memberId")}
            />
            Member ID
          </label>
          {searchMode === "memberId" && (
            <input
              type="number"
              className="small-input"
              value={memberId}
              onChange={(e) => setMemberId(e.target.value)}
              placeholder="Enter Member ID"
              required
            />
          )}
        </div>

        {/* Search by Name + House No */}
        <div className="form-row">
          <label className="radio-label">
            <input
              type="radio"
              value="nameHouse"
              checked={searchMode === "nameHouse"}
              onChange={() => setSearchMode("nameHouse")}
            />
            Name 
          </label>
          {searchMode === "nameHouse" && (
            <div className="inline-fields">
              <input
                type="text"
                className="small-input"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Name"
                required
              />
              <label> & House # </label>
              <input
                type="text"
                className="small-input"
                value={houseNumber}
                onChange={(e) => setHouseNumber(e.target.value)}
                placeholder="House #"
                required
              />
            </div>
          )}
        </div>

        <button type="submit" className="button" disabled={isLoading}>
          {isLoading ? "Searching..." : "Search"}
        </button>
      </form>

      {/* Results Table */}
      {result && (
        <div className="result-table-wrapper">
          <table className="result-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Phone</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td className="nowrap">{result.name}</td>
                <td>{result.address}</td>
                <td className="nowrap">{result.phone}</td>
              </tr>
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

export default SubmitForm;


/* =============== Working 090325 ====11;45am =========
import React, { useState } from "react";
import { searchMember } from "../api";
import "../styles/SubmitForm.css";

function SubmitForm() {
  const [searchType, setSearchType] = useState("id"); // "id" or "name"
  const [memberId, setMemberId] = useState("");
  const [name, setName] = useState("");
  const [houseNumber, setHouseNumber] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setResult(null);

    try {
      setIsLoading(true);
      let payload = {};

      if (searchType === "id") {
        if (!memberId) return setError("Member ID is required.");
        payload = { memberId };
      } else {
        if (!name || !houseNumber) return setError("Name and House Number are required.");
        payload = { name, houseNumber };
      }

      console.log("✅ Searching:", payload);
      const data = await searchMember(payload);

      setResult(data);
      localStorage.setItem("name", data.name);

    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="top-half">
        <h2>JSMC</h2>
        <h3>Submit RSVP</h3>
      </div>

      <div className="input-half">
        {error && <p className="error-message">{error}</p>}

        <div className="form-group">
          <label>
            <input
              type="radio"
              value="id"
              checked={searchType === "id"}
              onChange={() => setSearchType("id")}
            />
            Search by Member ID
          </label>
          <label style={{ marginLeft: "1rem" }}>
            <input
              type="radio"
              value="name"
              checked={searchType === "name"}
              onChange={() => setSearchType("name")}
            />
            Search by Name + House Number
          </label>
        </div>

        <form onSubmit={handleSubmit}>
          {searchType === "id" && (
            <div className="form-group">
              <label>Member ID:</label>
              <input
                type="number"
                value={memberId}
                onChange={(e) => setMemberId(e.target.value)}
                autoFocus
              />
            </div>
          )}

          {searchType === "name" && (
            <>
              <div className="form-group">
                <label>Name:</label>
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
              </div>
              <div className="form-group">
                <label>House Number:</label>
                <input
                  type="text"
                  value={houseNumber}
                  onChange={(e) => setHouseNumber(e.target.value)}
                />
              </div>
            </>
          )}

          <button className="button" type="submit" disabled={isLoading}>
            {isLoading ? "Searching..." : "Search"}
          </button>
        </form>

        {result && (
        <div className="table-wrapper">
            <table className="result-table">
            <thead>
                <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Phone</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                <td data-label="Name">{result.name}</td>
                <td data-label="Address">{result.address}</td>
                <td data-label="Phone">{result.phone}</td>
                </tr>
            </tbody>
            </table>
        </div>
        )}
      </div>
    </div>
  );
}

export default SubmitForm;
*/

/* ================ Working 090225 ======================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { searchMember } from "../api";
import "../styles/SubmitForm.css";

function SubmitForm() {
  const [memberId, setMemberId] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (!memberId) {
      setError("Member ID is required.");
      return;
    }

    try {
      setIsLoading(true);
      console.log("✅ Member Search:", memberId);
      const data = await searchMember(memberId);

      // save info locally if needed
      localStorage.setItem("name", data.name);
      console.log("✅ Member found:", data);

      // optionally navigate
      // navigate("/somepage");

    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="top-half">
        <h2>JSMC RSVP</h2>
        <h3>Submit RSVP</h3>
      </div>
      <div className="input-half">
        {error && <p className="error-message">{error}</p>}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Member ID:</label>
            <input
              type="number"
              value={memberId}
              onChange={(e) => setMemberId(e.target.value)}
              required
              autoFocus
            />
          </div>
          <button className="button" type="submit" disabled={isLoading}>
            {isLoading ? "Searching..." : "Search"}
          </button>
        </form>
      </div>
    </div>
  );
}

export default SubmitForm;
*/




/* Resetting margin and padding */
body {
    margin: 0;
    padding: 0;
    height: 100vh;
    font-family: Arial, sans-serif;
    background-color: #e8f3f9;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Container Styling */
.login-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: #e4fde5;
    width: 100%;
    max-width: 400px;
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Top section styling */
.top-half {
    width: 100%;
    text-align: center;
    margin-bottom: 15px;
}

/* Input section styling */
.input-half {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
}

/* Form Styling */
form {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
}

/* Form Group */
.form-group {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 300px;
    margin-bottom: 12px;
}

label {
    font-size: 14px;
    margin-bottom: 5px;
    text-align: left;
    width: 100%;
}

input {
    padding: 10px;
    width: 100%;
    max-width: 250px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

/* Error Message */
.error-message {
    color: red;
    font-size: 14px;
    text-align: center;
    margin-bottom: 10px;
}

/* Button Styling */
.button {
    background: #33afff;
    color: white;
    border: none;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    font-weight: bold;
    width: 100%;
    max-width: 200px;
    text-align: center;
    margin-top: 10px;
}

.button:hover {
    background-color: #1e8ae5;
}
/* ================================================ */
.search-container {
  max-width: 1500px;
  margin: 0 auto;
  padding: 1rem;
  text-align: center;
}

.search-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.form-row {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  flex-wrap: nowrap;   /* ❌ prevent breaking into 2 lines */
  min-width: 300px;    /* ✅ ensure enough space */
}

.radio-label {
  display: flex;
  align-items: left;
  gap: 0.4rem;
  white-space: nowrap; /* ✅ keep radio + label together */
}

.inline-fields {
  display: flex;
  gap: 0.5rem;
}

.small-input {
  width: 100px;     /* ✅ slightly smaller so it fits */
  padding: 0.3rem 0.5rem;
}

.button {
  margin-top: 1rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
}

.result-table-wrapper {
  overflow-x: auto;
}

.result-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
}

.result-table th,
.result-table td {
  border: 1px solid #ccc;
  padding: 0.5rem;
  text-align: left;
}

.result-table th {
  background: #f4f4f4;
}

.nowrap {
  white-space: nowrap;
}

/* ================================================
.table-wrapper {
  width: 100%;
  overflow-x: auto;
  margin-top: 1rem;
}

.result-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.95rem;
}

.result-table th,
.result-table td {
  border: 1px solid #ccc;
  padding: 8px 12px;
  text-align: left;
}

.result-table th {
  background-color: #f4f6f8;
  font-weight: bold;
}
*/

/* --- Responsive (Mobile First) --- */
@media screen and (max-width: 600px) {
  .result-table thead {
    display: none; /* hide headers */
  }

  .result-table tr {
    display: block;
    margin-bottom: 1rem;
    border: 1px solid #ddd;
    border-radius: 6px;
    background: #fff;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  .result-table td {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border: none;
    border-bottom: 1px solid #eee;
  }

  .result-table td:last-child {
    border-bottom: none;
  }

  .result-table td::before {
    content: attr(data-label);
    font-weight: bold;
    margin-right: 8px;
    color: #333;
  }
}
/* ================================================ */

/* Responsive adjustments */
@media (max-width: 680px) { /* 580px to 680px */
    .login-container {
        width: 100%; /* 95% to 100% */
        padding: 15px;
    }

    h2 {
        font-size: 16px;
    }

    h3 {
        font-size: 14px; /* added to test */
    }

    input {
        padding: 10px; /* added to test */
        font-size: 12px;
        max-width: 200px;
    }

    .button {
        font-size: 12px;
        max-width: 160px;
        padding: 6px;
    }
}

/* ✅ On small screens allow wrapping again */
@media (max-width: 480px) {
  .form-row {
    flex-wrap: wrap;
    justify-content: flex-start;
  }

  .small-input {
    width: 100%;  /* inputs stack on mobile */
  }

  .inline-fields {
    flex-direction: column;
    width: 100%;
  }
}