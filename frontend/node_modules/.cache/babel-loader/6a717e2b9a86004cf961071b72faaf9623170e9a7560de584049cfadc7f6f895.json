{"ast":null,"code":"var _jsxFileName = \"/Users/tejas.shah/Downloads/jsmcrsvp/frontend/src/components/AddProgramForm.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/AddProgramForm.js\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms, updateEventStatus } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\n// ✅ Utility to format YYYY-MM-DD → MM/DD/YYYY\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst displayDate = dateStr => {\n  if (!dateStr) return \"\";\n  const [year, month, day] = dateStr.split(\"-\");\n  return `${month}/${day}/${year}`;\n};\nconst AddProgramForm = () => {\n  _s();\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n  const [rsvpClosedate, setRsvpClosedate] = useState(\"\");\n  const [programs, setPrograms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  // For editing event status\n  const [editRow, setEditRow] = useState(null);\n  const [newStatus, setNewStatus] = useState(\"\");\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\");\n      const day = date.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        timeZone: \"UTC\"\n      });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs from DB\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    if (!progname || !eventname || !eventdate || !eventday || !rsvpClosedate) {\n      setError(\"All fields are required.\");\n      return;\n    }\n    try {\n      const payload = {\n        progname,\n        progevent: [{\n          eventname,\n          eventdate,\n          eventday,\n          eventstatus,\n          closersvp: rsvpClosedate\n        }]\n      };\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      setRsvpClosedate(\"\");\n      fetchPrograms();\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  // Save status change\n  const handleSaveStatus = async (progId, evId) => {\n    try {\n      await updateEventStatus(progId, evId, newStatus);\n      setSuccess(\"✅ Event status updated!\");\n      setEditRow(null);\n      fetchPrograms();\n    } catch (err) {\n      console.error(\"Error updating event status:\", err);\n      setError(\"❌ Failed to update status.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-program-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Activate Program & Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"program-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Program\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: progname,\n          onChange: e => setProgname(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Program --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Anniversary\",\n            children: \"Anniversary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Diwali\",\n            children: \"Diwali\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Mahavir Janma Kalyaanak\",\n            children: \"Mahavir Janma Kalyaanak\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Paryushan\",\n            children: \"Paryushan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Pathshala\",\n            children: \"Pathshala\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: eventname,\n          onChange: e => setEventname(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Event --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Navkarsi\",\n            children: \"Navkarsi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Afternoon Swamivatsalya\",\n            children: \"Afternoon Swamivatsalya\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Evening Swamivatsalya\",\n            children: \"Evening Swamivatsalya\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Event Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: eventdate,\n          onChange: e => setEventdate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Event Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: eventday,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"RSVP Close Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: rsvpClosedate,\n          onChange: e => setRsvpClosedate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Event Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: eventstatus,\n          onChange: e => setEventstatus(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Open\",\n            children: \"Open\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Closed\",\n            children: \"Closed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Completed\",\n            children: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn-submit\",\n        children: \"Add Program\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"form-message error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"form-message success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 19\n    }, this), programs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Program & Event Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"programs-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Program Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Event Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Event Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"RSVP By\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Modify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: programs.map((program, index) => program.progevent.map((event, idx) => {\n            const rowKey = `${program._id}-${event._id}`;\n            const isFirst = idx === 0;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [isFirst && /*#__PURE__*/_jsxDEV(\"td\", {\n                rowSpan: program.progevent.length,\n                children: program.progname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: event.eventname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [event.eventday, \", \", displayDate(event.eventdate)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: displayDate(event.closersvp)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editRow === rowKey ? /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: newStatus,\n                  onChange: e => setNewStatus(e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Open\",\n                    children: \"Open\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Closed\",\n                    children: \"Closed\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 244,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Completed\",\n                    children: \"Completed\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 27\n                }, this) : event.eventstatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editRow === rowKey ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-save\",\n                  onClick: () => handleSaveStatus(program._id, event._id),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 27\n                }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  onChange: () => {\n                    setEditRow(rowKey);\n                    setNewStatus(event.eventstatus);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 23\n              }, this)]\n            }, rowKey, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 21\n            }, this);\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(AddProgramForm, \"3/NXdgZMcOId6Y2EKMLY2ev2GvA=\");\n_c = AddProgramForm;\nexport default AddProgramForm;\n\n/* frontend/src/components/AddProgramForm.js ====== Working 9/10/25 ======== 1pm ========\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\n// ✅ Utility to format YYYY-MM-DD → MM/DD/YYYY\nconst displayDate = (dateStr) => {\n  if (!dateStr) return \"\";\n  const [year, month, day] = dateStr.split(\"-\");\n  return `${month}/${day}/${year}`;\n};\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n  const [closersvp, setClosersvp] = useState(\"\");\n\n  const [programs, setPrograms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\");\n      const day = date.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        timeZone: \"UTC\",\n      });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs on mount\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday || !closersvp) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n            closersvp,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      setClosersvp(\"\");\n      fetchPrograms(); // Refresh list\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* ✅ Status messages\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Program Form\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">Mahavir Janma Kalyaanak</option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">Afternoon Swamivatsalya</option>\n            <option value=\"Evening Swamivatsalya\">Evening Swamivatsalya</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input type=\"text\" value={eventday} readOnly />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>RSVP Close Date</label>\n          <input\n            type=\"date\"\n            value={closersvp}\n            onChange={(e) => setClosersvp(e.target.value)}\n            required\n          />\n        </div>\n\n        <button type=\"submit\">Add Program</button>\n      </form>\n\n      {/* Table\n      {programs.length > 0 && (\n        <div className=\"result-table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"result-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Status</th>\n                <th>RSVP Close</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => (\n                  <tr key={`${index}-${idx}`}>\n                    {idx === 0 && (\n                      <td rowSpan={program.progevent.length}>\n                        {program.progname}\n                      </td>\n                    )}\n                    <td>{event.eventname}</td>\n                    <td>{displayDate(event.eventdate)}</td>\n                    <td>{event.eventday}</td>\n                    <td>{event.eventstatus}</td>\n                    <td>{displayDate(event.closersvp)}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n*/\n\n/* frontend/src/components/AddProgramForm.js ===== Working 091025 === 8am\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n\n  const [programs, setPrograms] = useState([]); // ✅ renamed from programList\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\"); // Ensures UTC interpretation\n      const day = date.toLocaleDateString(\"en-US\", { weekday: \"long\", timeZone: \"UTC\" });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs on mount\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      fetchPrograms(); // Refresh list\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* ✅ Status messages\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Program Form\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">Mahavir Janma Kalyaanak</option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">Afternoon Swamivatsalya</option>\n            <option value=\"Evening Swamivatsalya\">Evening Swamivatsalya</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input\n            type=\"text\"\n            value={eventday}\n            readOnly\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <button type=\"submit\">Add Program</button>\n      </form>\n\n      {/* Table\n      {programs.length > 0 && (\n        <div className=\"result-table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"result-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => (\n                  <tr key={`${index}-${idx}`}>\n                    <td>{program.progname}</td>\n                    <td>{event.eventname}</td>\n                    <td>{event.eventdate}</td>\n                    <td>{event.eventday}</td>\n                    <td>{event.eventstatus}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n*/\nvar _c;\n$RefreshReg$(_c, \"AddProgramForm\");","map":{"version":3,"names":["React","useState","useEffect","addProgram","getAllPrograms","updateEventStatus","jsxDEV","_jsxDEV","displayDate","dateStr","year","month","day","split","AddProgramForm","_s","progname","setProgname","eventname","setEventname","eventdate","setEventdate","eventday","setEventday","eventstatus","setEventstatus","rsvpClosedate","setRsvpClosedate","programs","setPrograms","loading","setLoading","error","setError","success","setSuccess","editRow","setEditRow","newStatus","setNewStatus","date","Date","toLocaleDateString","weekday","timeZone","fetchPrograms","data","err","console","handleSubmit","e","preventDefault","payload","progevent","closersvp","handleSaveStatus","progId","evId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","required","type","readOnly","length","map","program","index","event","idx","rowKey","_id","isFirst","rowSpan","onClick","_c","$RefreshReg$"],"sources":["/Users/tejas.shah/Downloads/jsmcrsvp/frontend/src/components/AddProgramForm.js"],"sourcesContent":["// frontend/src/components/AddProgramForm.js\nimport React, { useState, useEffect } from \"react\";\nimport {\n  addProgram,\n  getAllPrograms,\n  updateEventStatus,\n} from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\n// ✅ Utility to format YYYY-MM-DD → MM/DD/YYYY\n  const displayDate = (dateStr) => {\n    if (!dateStr) return \"\";\n    const [year, month, day] = dateStr.split(\"-\");\n    return `${month}/${day}/${year}`;\n  };\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n  const [rsvpClosedate, setRsvpClosedate] = useState(\"\");\n\n  const [programs, setPrograms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  // For editing event status\n  const [editRow, setEditRow] = useState(null);\n  const [newStatus, setNewStatus] = useState(\"\");\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\");\n      const day = date.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        timeZone: \"UTC\",\n      });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs from DB\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday || !rsvpClosedate) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n            closersvp: rsvpClosedate,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      setRsvpClosedate(\"\");\n      fetchPrograms();\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  // Save status change\n  const handleSaveStatus = async (progId, evId) => {\n    try {\n      await updateEventStatus(progId, evId, newStatus);\n      setSuccess(\"✅ Event status updated!\");\n      setEditRow(null);\n      fetchPrograms();\n    } catch (err) {\n      console.error(\"Error updating event status:\", err);\n      setError(\"❌ Failed to update status.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* Program Form */}\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">\n              Mahavir Janma Kalyaanak\n            </option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">\n              Afternoon Swamivatsalya\n            </option>\n            <option value=\"Evening Swamivatsalya\">\n              Evening Swamivatsalya\n            </option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input type=\"text\" value={eventday} readOnly />\n        </div>\n\n        <div className=\"form-group\">\n          <label>RSVP Close Date</label>\n          <input\n            type=\"date\"\n            value={rsvpClosedate}\n            onChange={(e) => setRsvpClosedate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <button type=\"submit\" className=\"btn-submit\">Add Program</button>\n      </form>\n      \n      {/* Status messages */}\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Programs & Events Table */}\n      {programs.length > 0 && (\n        <div className=\"table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"programs-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Event Date</th>\n                <th>RSVP By</th>\n                <th>Status</th>\n                <th>Modify</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => {\n                  const rowKey = `${program._id}-${event._id}`;\n                  const isFirst = idx === 0;\n\n                  return (\n                    <tr key={rowKey}>\n                      {isFirst && (\n                        <td rowSpan={program.progevent.length}>\n                          {program.progname}\n                        </td>\n                      )}\n                      <td>{event.eventname}</td>\n                      <td>{event.eventday}, {displayDate(event.eventdate)}</td>\n                      <td>{displayDate(event.closersvp)}</td>\n                      <td>\n                        {editRow === rowKey ? (\n                          <select\n                            value={newStatus}\n                            onChange={(e) => setNewStatus(e.target.value)}\n                          >\n                            <option value=\"Open\">Open</option>\n                            <option value=\"Closed\">Closed</option>\n                            <option value=\"Completed\">Completed</option>\n                          </select>\n                        ) : (\n                          event.eventstatus\n                        )}\n                      </td>\n                      <td>\n                        {editRow === rowKey ? (\n                          <button className=\"btn-save\"\n                            onClick={() =>\n                              handleSaveStatus(program._id, event._id)\n                            }\n                          >\n                            Save\n                          </button>\n                        ) : (\n                          <input\n                            type=\"checkbox\"\n                            onChange={() => {\n                              setEditRow(rowKey);\n                              setNewStatus(event.eventstatus);\n                            }}\n                          />\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n\n\n\n/* frontend/src/components/AddProgramForm.js ====== Working 9/10/25 ======== 1pm ========\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\n// ✅ Utility to format YYYY-MM-DD → MM/DD/YYYY\nconst displayDate = (dateStr) => {\n  if (!dateStr) return \"\";\n  const [year, month, day] = dateStr.split(\"-\");\n  return `${month}/${day}/${year}`;\n};\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n  const [closersvp, setClosersvp] = useState(\"\");\n\n  const [programs, setPrograms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\");\n      const day = date.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        timeZone: \"UTC\",\n      });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs on mount\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday || !closersvp) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n            closersvp,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      setClosersvp(\"\");\n      fetchPrograms(); // Refresh list\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* ✅ Status messages\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Program Form\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">Mahavir Janma Kalyaanak</option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">Afternoon Swamivatsalya</option>\n            <option value=\"Evening Swamivatsalya\">Evening Swamivatsalya</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input type=\"text\" value={eventday} readOnly />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>RSVP Close Date</label>\n          <input\n            type=\"date\"\n            value={closersvp}\n            onChange={(e) => setClosersvp(e.target.value)}\n            required\n          />\n        </div>\n\n        <button type=\"submit\">Add Program</button>\n      </form>\n\n      {/* Table\n      {programs.length > 0 && (\n        <div className=\"result-table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"result-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Status</th>\n                <th>RSVP Close</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => (\n                  <tr key={`${index}-${idx}`}>\n                    {idx === 0 && (\n                      <td rowSpan={program.progevent.length}>\n                        {program.progname}\n                      </td>\n                    )}\n                    <td>{event.eventname}</td>\n                    <td>{displayDate(event.eventdate)}</td>\n                    <td>{event.eventday}</td>\n                    <td>{event.eventstatus}</td>\n                    <td>{displayDate(event.closersvp)}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n*/\n\n\n/* frontend/src/components/AddProgramForm.js ===== Working 091025 === 8am\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n\n  const [programs, setPrograms] = useState([]); // ✅ renamed from programList\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\"); // Ensures UTC interpretation\n      const day = date.toLocaleDateString(\"en-US\", { weekday: \"long\", timeZone: \"UTC\" });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs on mount\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      fetchPrograms(); // Refresh list\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* ✅ Status messages\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Program Form\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">Mahavir Janma Kalyaanak</option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">Afternoon Swamivatsalya</option>\n            <option value=\"Evening Swamivatsalya\">Evening Swamivatsalya</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input\n            type=\"text\"\n            value={eventday}\n            readOnly\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <button type=\"submit\">Add Program</button>\n      </form>\n\n      {/* Table\n      {programs.length > 0 && (\n        <div className=\"result-table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"result-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => (\n                  <tr key={`${index}-${idx}`}>\n                    <td>{program.progname}</td>\n                    <td>{event.eventname}</td>\n                    <td>{event.eventdate}</td>\n                    <td>{event.eventday}</td>\n                    <td>{event.eventstatus}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}