{"ast":null,"code":"// frontend/src/components/ActivateEventForm.js\nimport React,{useState,useEffect}from\"react\";import{addProgram,getAllPrograms,updateEventStatus}from\"../api\";//import \"../styles/AddProgramForm.css\";\nimport\"../styles/ActivateEventForm.css\";// ✅ Utility to format YYYY-MM-DD → MM/DD/YYYY\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const displayDate=dateStr=>{if(!dateStr)return\"\";const[year,month,day]=dateStr.split(\"-\");return\"\".concat(month,\"/\").concat(day,\"/\").concat(year);};const ActivateEventForm=()=>{const[progname,setProgname]=useState(\"\");const[eventname,setEventname]=useState(\"\");const[eventdate,setEventdate]=useState(\"\");const[eventday,setEventday]=useState(\"\");const[eventstatus,setEventstatus]=useState(\"Open\");const[rsvpClosedate,setRsvpClosedate]=useState(\"\");const[programs,setPrograms]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(\"\");const[success,setSuccess]=useState(\"\");// For editing event status\nconst[editRow,setEditRow]=useState(null);const[newStatus,setNewStatus]=useState(\"\");// Auto-update eventDay when eventdate changes\nuseEffect(()=>{if(eventdate){const date=new Date(eventdate+\"T00:00:00Z\");const day=date.toLocaleDateString(\"en-US\",{weekday:\"long\",timeZone:\"UTC\"});setEventday(day);}else{setEventday(\"\");}},[eventdate]);// Fetch programs from DB\nconst fetchPrograms=async()=>{try{setLoading(true);const data=await getAllPrograms();setPrograms(data);}catch(err){console.error(\"Error fetching programs:\",err);setError(\"Failed to load programs\");}finally{setLoading(false);}};useEffect(()=>{fetchPrograms();},[]);// Handle form submission\nconst handleSubmit=async e=>{e.preventDefault();setError(\"\");setSuccess(\"\");if(!progname||!eventname||!eventdate||!eventday||!rsvpClosedate){setError(\"All fields are required.\");return;}try{const payload={progname,progevent:[{eventname,eventdate,eventday,eventstatus,closersvp:rsvpClosedate}]};await addProgram(payload);setSuccess(\"✅ Program & Event added successfully!\");setProgname(\"\");setEventname(\"\");setEventdate(\"\");setEventday(\"\");setEventstatus(\"Open\");setRsvpClosedate(\"\");fetchPrograms();}catch(err){console.error(\"Error activating event:\",err);setError(\"❌ Failed to activate event.\");}};// Save status change\nconst handleSaveStatus=async(progId,evId)=>{try{await updateEventStatus(progId,evId,newStatus);setSuccess(\"✅ Event status updated!\");setEditRow(null);fetchPrograms();}catch(err){console.error(\"Error updating event status:\",err);setError(\"❌ Failed to update status.\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"add-program-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Activate Program & Event\"}),/*#__PURE__*/_jsxs(\"form\",{className:\"program-form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Program\"}),/*#__PURE__*/_jsxs(\"select\",{value:progname,onChange:e=>setProgname(e.target.value),required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Select Program --\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Anniversary\",children:\"Anniversary\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Diwali\",children:\"Diwali\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Mahavir Janma Kalyaanak\",children:\"Mahavir Janma Kalyaanak\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Paryushan\",children:\"Paryushan\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Pathshala\",children:\"Pathshala\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Event\"}),/*#__PURE__*/_jsxs(\"select\",{value:eventname,onChange:e=>setEventname(e.target.value),required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Select Event --\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Navkarsi\",children:\"Navkarsi\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Afternoon Swamivatsalya\",children:\"Afternoon Swamivatsalya\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Evening Swamivatsalya\",children:\"Evening Swamivatsalya\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Event Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:eventdate,onChange:e=>setEventdate(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Event Day\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:eventday,readOnly:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"RSVP Close Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:rsvpClosedate,onChange:e=>setRsvpClosedate(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Event Status\"}),/*#__PURE__*/_jsxs(\"select\",{value:eventstatus,onChange:e=>setEventstatus(e.target.value),required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"Open\",children:\"Open\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Closed\",children:\"Closed\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Completed\",children:\"Completed\"})]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn-submit\",children:\"Add Program\"})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"form-message error\",children:error}),success&&/*#__PURE__*/_jsx(\"p\",{className:\"form-message success\",children:success}),programs.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"table-wrapper\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Active Program & Event Details\"}),/*#__PURE__*/_jsxs(\"table\",{className:\"programs-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Program Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Event Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Event Date\"}),/*#__PURE__*/_jsx(\"th\",{children:\"RSVP By\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Status\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Modify\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:programs.map((program,index)=>program.progevent.map((event,idx)=>{const rowKey=\"\".concat(program._id,\"-\").concat(event._id);const isFirst=idx===0;return/*#__PURE__*/_jsxs(\"tr\",{children:[isFirst&&/*#__PURE__*/_jsx(\"td\",{rowSpan:program.progevent.length,children:program.progname}),/*#__PURE__*/_jsx(\"td\",{children:event.eventname}),/*#__PURE__*/_jsxs(\"td\",{children:[event.eventday,\", \",displayDate(event.eventdate)]}),/*#__PURE__*/_jsx(\"td\",{children:displayDate(event.closersvp)}),/*#__PURE__*/_jsx(\"td\",{children:editRow===rowKey?/*#__PURE__*/_jsxs(\"select\",{value:newStatus,onChange:e=>setNewStatus(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"Open\",children:\"Open\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Closed\",children:\"Closed\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Completed\",children:\"Completed\"})]}):event.eventstatus}),/*#__PURE__*/_jsx(\"td\",{children:editRow===rowKey?/*#__PURE__*/_jsx(\"button\",{className:\"btn-save\",onClick:()=>handleSaveStatus(program._id,event._id),children:\"Save\"}):/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",onChange:()=>{setEditRow(rowKey);setNewStatus(event.eventstatus);}})})]},rowKey);}))})]})]})]});};export default AddProgramForm;/* frontend/src/components/AddProgramForm.js ====== Working 9/10/25 ======== 1pm ========\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\n// ✅ Utility to format YYYY-MM-DD → MM/DD/YYYY\nconst displayDate = (dateStr) => {\n  if (!dateStr) return \"\";\n  const [year, month, day] = dateStr.split(\"-\");\n  return `${month}/${day}/${year}`;\n};\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n  const [closersvp, setClosersvp] = useState(\"\");\n\n  const [programs, setPrograms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\");\n      const day = date.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        timeZone: \"UTC\",\n      });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs on mount\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday || !closersvp) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n            closersvp,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      setClosersvp(\"\");\n      fetchPrograms(); // Refresh list\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* ✅ Status messages\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Program Form\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">Mahavir Janma Kalyaanak</option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">Afternoon Swamivatsalya</option>\n            <option value=\"Evening Swamivatsalya\">Evening Swamivatsalya</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input type=\"text\" value={eventday} readOnly />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>RSVP Close Date</label>\n          <input\n            type=\"date\"\n            value={closersvp}\n            onChange={(e) => setClosersvp(e.target.value)}\n            required\n          />\n        </div>\n\n        <button type=\"submit\">Add Program</button>\n      </form>\n\n      {/* Table\n      {programs.length > 0 && (\n        <div className=\"result-table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"result-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Status</th>\n                <th>RSVP Close</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => (\n                  <tr key={`${index}-${idx}`}>\n                    {idx === 0 && (\n                      <td rowSpan={program.progevent.length}>\n                        {program.progname}\n                      </td>\n                    )}\n                    <td>{event.eventname}</td>\n                    <td>{displayDate(event.eventdate)}</td>\n                    <td>{event.eventday}</td>\n                    <td>{event.eventstatus}</td>\n                    <td>{displayDate(event.closersvp)}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n*//* frontend/src/components/AddProgramForm.js ===== Working 091025 === 8am\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n\n  const [programs, setPrograms] = useState([]); // ✅ renamed from programList\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\"); // Ensures UTC interpretation\n      const day = date.toLocaleDateString(\"en-US\", { weekday: \"long\", timeZone: \"UTC\" });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs on mount\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      fetchPrograms(); // Refresh list\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* ✅ Status messages\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Program Form\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">Mahavir Janma Kalyaanak</option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">Afternoon Swamivatsalya</option>\n            <option value=\"Evening Swamivatsalya\">Evening Swamivatsalya</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input\n            type=\"text\"\n            value={eventday}\n            readOnly\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <button type=\"submit\">Add Program</button>\n      </form>\n\n      {/* Table\n      {programs.length > 0 && (\n        <div className=\"result-table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"result-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => (\n                  <tr key={`${index}-${idx}`}>\n                    <td>{program.progname}</td>\n                    <td>{event.eventname}</td>\n                    <td>{event.eventdate}</td>\n                    <td>{event.eventday}</td>\n                    <td>{event.eventstatus}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n*/","map":{"version":3,"names":["React","useState","useEffect","addProgram","getAllPrograms","updateEventStatus","jsx","_jsx","jsxs","_jsxs","displayDate","dateStr","year","month","day","split","concat","ActivateEventForm","progname","setProgname","eventname","setEventname","eventdate","setEventdate","eventday","setEventday","eventstatus","setEventstatus","rsvpClosedate","setRsvpClosedate","programs","setPrograms","loading","setLoading","error","setError","success","setSuccess","editRow","setEditRow","newStatus","setNewStatus","date","Date","toLocaleDateString","weekday","timeZone","fetchPrograms","data","err","console","handleSubmit","e","preventDefault","payload","progevent","closersvp","handleSaveStatus","progId","evId","className","children","onSubmit","value","onChange","target","required","type","readOnly","length","map","program","index","event","idx","rowKey","_id","isFirst","rowSpan","onClick","AddProgramForm"],"sources":["/Users/tejas.shah/Downloads/jsmcrsvp/frontend/src/components/ActivateEventForm.js"],"sourcesContent":["// frontend/src/components/ActivateEventForm.js\nimport React, { useState, useEffect } from \"react\";\nimport {\n  addProgram,\n  getAllPrograms,\n  updateEventStatus,\n} from \"../api\";\n//import \"../styles/AddProgramForm.css\";\nimport \"../styles/ActivateEventForm.css\"\n\n// ✅ Utility to format YYYY-MM-DD → MM/DD/YYYY\n  const displayDate = (dateStr) => {\n    if (!dateStr) return \"\";\n    const [year, month, day] = dateStr.split(\"-\");\n    return `${month}/${day}/${year}`;\n  };\n\nconst ActivateEventForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n  const [rsvpClosedate, setRsvpClosedate] = useState(\"\");\n\n  const [programs, setPrograms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  // For editing event status\n  const [editRow, setEditRow] = useState(null);\n  const [newStatus, setNewStatus] = useState(\"\");\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\");\n      const day = date.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        timeZone: \"UTC\",\n      });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs from DB\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday || !rsvpClosedate) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n            closersvp: rsvpClosedate,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      setRsvpClosedate(\"\");\n      fetchPrograms();\n    } catch (err) {\n      console.error(\"Error activating event:\", err);\n      setError(\"❌ Failed to activate event.\");\n    }\n  };\n\n  // Save status change\n  const handleSaveStatus = async (progId, evId) => {\n    try {\n      await updateEventStatus(progId, evId, newStatus);\n      setSuccess(\"✅ Event status updated!\");\n      setEditRow(null);\n      fetchPrograms();\n    } catch (err) {\n      console.error(\"Error updating event status:\", err);\n      setError(\"❌ Failed to update status.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* Program Form */}\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">\n              Mahavir Janma Kalyaanak\n            </option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">\n              Afternoon Swamivatsalya\n            </option>\n            <option value=\"Evening Swamivatsalya\">\n              Evening Swamivatsalya\n            </option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input type=\"text\" value={eventday} readOnly />\n        </div>\n\n        <div className=\"form-group\">\n          <label>RSVP Close Date</label>\n          <input\n            type=\"date\"\n            value={rsvpClosedate}\n            onChange={(e) => setRsvpClosedate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <button type=\"submit\" className=\"btn-submit\">Add Program</button>\n      </form>\n      \n      {/* Status messages */}\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Programs & Events Table */}\n      {programs.length > 0 && (\n        <div className=\"table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"programs-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Event Date</th>\n                <th>RSVP By</th>\n                <th>Status</th>\n                <th>Modify</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => {\n                  const rowKey = `${program._id}-${event._id}`;\n                  const isFirst = idx === 0;\n\n                  return (\n                    <tr key={rowKey}>\n                      {isFirst && (\n                        <td rowSpan={program.progevent.length}>\n                          {program.progname}\n                        </td>\n                      )}\n                      <td>{event.eventname}</td>\n                      <td>{event.eventday}, {displayDate(event.eventdate)}</td>\n                      <td>{displayDate(event.closersvp)}</td>\n                      <td>\n                        {editRow === rowKey ? (\n                          <select\n                            value={newStatus}\n                            onChange={(e) => setNewStatus(e.target.value)}\n                          >\n                            <option value=\"Open\">Open</option>\n                            <option value=\"Closed\">Closed</option>\n                            <option value=\"Completed\">Completed</option>\n                          </select>\n                        ) : (\n                          event.eventstatus\n                        )}\n                      </td>\n                      <td>\n                        {editRow === rowKey ? (\n                          <button className=\"btn-save\"\n                            onClick={() =>\n                              handleSaveStatus(program._id, event._id)\n                            }\n                          >\n                            Save\n                          </button>\n                        ) : (\n                          <input\n                            type=\"checkbox\"\n                            onChange={() => {\n                              setEditRow(rowKey);\n                              setNewStatus(event.eventstatus);\n                            }}\n                          />\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n\n\n\n/* frontend/src/components/AddProgramForm.js ====== Working 9/10/25 ======== 1pm ========\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\n// ✅ Utility to format YYYY-MM-DD → MM/DD/YYYY\nconst displayDate = (dateStr) => {\n  if (!dateStr) return \"\";\n  const [year, month, day] = dateStr.split(\"-\");\n  return `${month}/${day}/${year}`;\n};\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n  const [closersvp, setClosersvp] = useState(\"\");\n\n  const [programs, setPrograms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\");\n      const day = date.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        timeZone: \"UTC\",\n      });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs on mount\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday || !closersvp) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n            closersvp,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      setClosersvp(\"\");\n      fetchPrograms(); // Refresh list\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* ✅ Status messages\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Program Form\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">Mahavir Janma Kalyaanak</option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">Afternoon Swamivatsalya</option>\n            <option value=\"Evening Swamivatsalya\">Evening Swamivatsalya</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input type=\"text\" value={eventday} readOnly />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>RSVP Close Date</label>\n          <input\n            type=\"date\"\n            value={closersvp}\n            onChange={(e) => setClosersvp(e.target.value)}\n            required\n          />\n        </div>\n\n        <button type=\"submit\">Add Program</button>\n      </form>\n\n      {/* Table\n      {programs.length > 0 && (\n        <div className=\"result-table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"result-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Status</th>\n                <th>RSVP Close</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => (\n                  <tr key={`${index}-${idx}`}>\n                    {idx === 0 && (\n                      <td rowSpan={program.progevent.length}>\n                        {program.progname}\n                      </td>\n                    )}\n                    <td>{event.eventname}</td>\n                    <td>{displayDate(event.eventdate)}</td>\n                    <td>{event.eventday}</td>\n                    <td>{event.eventstatus}</td>\n                    <td>{displayDate(event.closersvp)}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n*/\n\n\n/* frontend/src/components/AddProgramForm.js ===== Working 091025 === 8am\nimport React, { useState, useEffect } from \"react\";\nimport { addProgram, getAllPrograms } from \"../api\";\nimport \"../styles/AddProgramForm.css\";\n\nconst AddProgramForm = () => {\n  const [progname, setProgname] = useState(\"\");\n  const [eventname, setEventname] = useState(\"\");\n  const [eventdate, setEventdate] = useState(\"\");\n  const [eventday, setEventday] = useState(\"\");\n  const [eventstatus, setEventstatus] = useState(\"Open\");\n\n  const [programs, setPrograms] = useState([]); // ✅ renamed from programList\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n\n  // Auto-update eventDay when eventdate changes\n  useEffect(() => {\n    if (eventdate) {\n      const date = new Date(eventdate + \"T00:00:00Z\"); // Ensures UTC interpretation\n      const day = date.toLocaleDateString(\"en-US\", { weekday: \"long\", timeZone: \"UTC\" });\n      setEventday(day);\n    } else {\n      setEventday(\"\");\n    }\n  }, [eventdate]);\n\n  // Fetch programs on mount\n  const fetchPrograms = async () => {\n    try {\n      setLoading(true);\n      const data = await getAllPrograms();\n      setPrograms(data);\n    } catch (err) {\n      console.error(\"Error fetching programs:\", err);\n      setError(\"Failed to load programs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (!progname || !eventname || !eventdate || !eventday) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    try {\n      const payload = {\n        progname,\n        progevent: [\n          {\n            eventname,\n            eventdate,\n            eventday,\n            eventstatus,\n          },\n        ],\n      };\n\n      await addProgram(payload);\n      setSuccess(\"✅ Program & Event added successfully!\");\n      setProgname(\"\");\n      setEventname(\"\");\n      setEventdate(\"\");\n      setEventday(\"\");\n      setEventstatus(\"Open\");\n      fetchPrograms(); // Refresh list\n    } catch (err) {\n      console.error(\"Error adding program:\", err);\n      setError(\"❌ Failed to add program.\");\n    }\n  };\n\n  return (\n    <div className=\"add-program-container\">\n      <h3>Activate Program & Event</h3>\n\n      {/* ✅ Status messages\n      {error && <p className=\"form-message error\">{error}</p>}\n      {success && <p className=\"form-message success\">{success}</p>}\n\n      {/* Program Form\n      <form className=\"program-form\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Select Program</label>\n          <select\n            value={progname}\n            onChange={(e) => setProgname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Program --</option>\n            <option value=\"Anniversary\">Anniversary</option>\n            <option value=\"Diwali\">Diwali</option>\n            <option value=\"Mahavir Janma Kalyaanak\">Mahavir Janma Kalyaanak</option>\n            <option value=\"Paryushan\">Paryushan</option>\n            <option value=\"Pathshala\">Pathshala</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Select Event</label>\n          <select\n            value={eventname}\n            onChange={(e) => setEventname(e.target.value)}\n            required\n          >\n            <option value=\"\">-- Select Event --</option>\n            <option value=\"Navkarsi\">Navkarsi</option>\n            <option value=\"Afternoon Swamivatsalya\">Afternoon Swamivatsalya</option>\n            <option value=\"Evening Swamivatsalya\">Evening Swamivatsalya</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Date</label>\n          <input\n            type=\"date\"\n            value={eventdate}\n            onChange={(e) => setEventdate(e.target.value)}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Day</label>\n          <input\n            type=\"text\"\n            value={eventday}\n            readOnly\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Event Status</label>\n          <select\n            value={eventstatus}\n            onChange={(e) => setEventstatus(e.target.value)}\n            required\n          >\n            <option value=\"Open\">Open</option>\n            <option value=\"Closed\">Closed</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <button type=\"submit\">Add Program</button>\n      </form>\n\n      {/* Table\n      {programs.length > 0 && (\n        <div className=\"result-table-wrapper\">\n          <h3>Active Program & Event Details</h3>\n          <table className=\"result-table\">\n            <thead>\n              <tr>\n                <th>Program Name</th>\n                <th>Event Name</th>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programs.map((program, index) =>\n                program.progevent.map((event, idx) => (\n                  <tr key={`${index}-${idx}`}>\n                    <td>{program.progname}</td>\n                    <td>{event.eventname}</td>\n                    <td>{event.eventdate}</td>\n                    <td>{event.eventday}</td>\n                    <td>{event.eventstatus}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProgramForm;\n*/"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}